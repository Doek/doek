<?php

//Put all users who are not students into alumni
function move_user_to_alumni_role(){
        $query = db_query("SELECT entity_id id FROM field_data_field_study_degree where field_study_degree_value != 'Bachelor-studerende'");

        foreach($query as $account){
                $user = user_load($account->id);
                $key = array_search('Alumni', $user->roles);
                if($key == FALSE){
                        $role_name = 'Alumni';
                        if($role = user_role_load_by_name($role_name)){
                                user_multiple_role_edit(array($user->uid), 'add_role', $role->rid);
                        }
                }
        }
        echo "Moved users to Alumni Role";
        return true;
}

//Funcktion update user role by payment info
function update_user_role_by_payment(){
        $query = db_query("SELECT entity_id id, field_payment__value datevalue FROM field_data_field_payment_");

        //Foreach user with a regisred payment
        foreach($query as $account){
                $time = DateTime::createFromFormat('!d/m/y', $account->datevalue)->getTimestamp();
                $user = user_load($account->id);

                //Check if the user is an active member of Alumni
                if($key = array_search('Alumni_aktiv', $user->roles)){
                        echo $user->username." is member of Alumni_aktiv<br />";
                        //If the payment is more than a year old, we remove the active role
                        if($time >= time()+60*60*24*365){
                                $role_name = 'Alumni_aktiv';
                                if($role = user_role_load_by_name($role_name)){
                                        echo "\t"." User is removed from alumni_aktiv<br />";
                                        user_multiple_role_edit(array($user->uid), 'remove_role', $role->rid);
                                }
                        }
                //If the user is not member of Alumni and the payment is less than a year old. We add the new role
                }else{
                        echo $user->username." is not member of Alumni_aktiv<br />";
                        //if the member is 
                        if($time <= time()+60*60*24*365){
                                $role_name = 'Alumni_aktiv';
                                if($role = user_role_load_by_name($role_name)){
                                        echo "\t"." User is removed from alumni_aktiv<br />";
                                        user_multiple_role_edit(array($user->uid), 'add_role', $role->rid);
                                }
                        }
                }
        }

        return true;
}


//Insert Unique ID for a new user
function doek_alumni_user_insert(&$edit, $account, $category){
        $query = db_query("SELECT max(field_alumnimedlem_value) max FROM field_data_field_alumnimedlem");

        $result = $query->fetchObject();

        $member_id = $result->max;
	$edit['field_alumnimedlem']['und'][0]['value'] = $member_id + 1;		
}

function doek_payment_import_users_from_file(){
        $count = 0;

        $dest = variable_get('file_public_path', conf_path() . '/files');

        $file = fopen($dest."/alumni.csv", "r");

        $protected = array("uid", "navn");
        $matching = array("alumni" => "field_alumnimedlem", "date" => "field_payment_", "status" => "field_payment_status");

        $headers = fgetcsv($file);

        while($line = fgetcsv($file)){
		$uid = $line[0];
		$query = db_query("SELECT entity_id id FROM field_data_field_alumnimedlem WHERE field_alumnimedlem_value = $uid");
	        $result = $query->fetchObject();
        	$user_id = $result->id;

	        if($user = user_load($user_id)){
		
			$index = 0;
			foreach($line as $field){

				$line_header = (in_array($headers[$index], array_keys($matching))) ? $matching[$headers[$index]] : $headers[$index];
				//echo $line_header." : ".$field."<br />";
				if(!in_array($line_header, $protected)){
					//echo $line_header." : ".$field."<br />";
					$edit['roles'] = array(12 =>'Alumni_aktiv');
					$edit[$line_header]['und'][0]['value'] = $field;
				}
				$index++;
			}
			user_save($user, $edit);
			$count++;
		}
        }
        fclose($file);
	return true;
}

/*
function doek_alumni_form_alter(&$form, &$form_state, $form_id){

	if(!($form_id == 'user_register_form' || $form_id == 'user_profile_form')){
		return;
	}
	global $user;

	if(is_array($user->roles) && in_array('administrator', $user->roles)){

		$form['alumni'] = array(
				'#type' 	=> 'fieldset', 
				'#title' 	=> t('DÃ˜K Alumni Oplysninger'),
				'#collapsible'	=> TRUE, 
				'#collapsed'	=> FALSE,
				'#weight'	=> 10,
				);

		$form['alumni']['membership'] = array(
				'#type'		=> 'checkbox',
				'#options'	=> array('aktiv' => 1, 'inaktiv' => 2),
				'#title'	=> t('Alumni medlem'),
				'#description'	=> t('Om personen er medlem af Alumni'),
				);

		$form['alumni']['payment_date'] = array(
				'#type'		=> 'date',
				'#title'	=> t('Betalingsdag'),
				'#description'	=> t('Data hvor personen har betalt for medlemsskab'),
				);
		
		$form['alumni']['member_id'] = array(
				'#type'		=> 'textfield',
				'#title'	=> t('Medlemsnummer'),
				'#description'	=> t('Brugerens medlemsnummer fra den gamle database'),
				'#maxlength'	=> 30,
				'#size'		=> 30,
				);

	}
		return $form;
}
*/


function assign_membership_number(){

	$query = db_query("SELECT max(field_alumnimedlem_value) max FROM field_data_field_alumnimedlem");
	
	$result = $query->fetchObject();

	$current_number = $result->max;
	$counter = 0;

	$role_users = db_query("SELECT uid FROM users WHERE uid != 0");

	foreach($role_users as $account){
		$account = user_load($account->uid);
			//die(var_dump($account));	

		if(empty($account->field_alumnimedlem)){
			$edit = array(
				'field_alumnimedlem' => array(
					'und' => array(
						'0' => array(
							'value' => $current_number + 1,
							),
						),
					),
				);
		        $current_number++;	
			user_save($account, $edit);
			$counter++;
		}
	}

	return true;
}


function doek_alumni_cron(){

	$status = false;

	//$status = assign_membership_number();
	//$status = doek_payment_import_users_from_file();	
	$status = move_user_to_alumni_role();	
	
	return $status;
}

