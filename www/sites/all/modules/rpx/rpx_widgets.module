<?php
// $Id: rpx_widgets.module,v 1.9 2011/02/04 17:12:05 geokat Exp $

/**
 * @file
 *
 * This module integrates the Janrain Engage Sign-in and Social Publishing
 * Widgets into Drupal.
 *
 * @see http://www.janrain.com/products/engage
 */

define('RPX_SIGNIN_STRING', t('Sign in using one of these accounts:'));

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rpx_widgets_form_user_login_block_alter(&$form, &$form_state) {
  if (variable_get('rpx_attach_login_form', 0)) {
    _rpx_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rpx_widgets_form_user_login_alter(&$form, &$form_state) {
  if (variable_get('rpx_attach_login_form', 0)) {
    _rpx_user_login_form_alter($form, $form_state);
  }
}

/**
 * Adds Engage sign-in link to the form.
 */
function _rpx_user_login_form_alter(&$form, &$form_state) {
  // Remove Open ID form elements based on settings
  if (module_exists('openid') && variable_get('rpx_openid_override', 0)) {
    unset($form['#validate']['openid_login_validate']);
    unset($form['openid_links']);
    unset($form['openid_identifier']);
    unset($form['openid.return_to']);
  }

  rpx_js();
  $items = array();
  $realm = variable_get('rpx_realm', '');
  $realm_scheme = variable_get('rpx_realm_scheme', 'http');
  $sign_in_url = "$realm_scheme://$realm/openid/v2/signin";
  $token_url = _rpx_token_url();
  $providers = _rpx_providers();

  // These options are common for all providers.
  $options_template = array(
    'query' => array('token_url' => $token_url),
    'html' => TRUE,
    'attributes' => array(
      'class' => 'rpxnow',
      'onclick' => 'return false;',
      'onmousedown' => 'delete RPXNOW.default_provider;',
    ),
  );

  $icons = '';
  foreach ($providers as $provider) {
    $options = $options_template;
    // If it's the first Engage sign-in for the user, this will take them
    // directly to the provider's dialog.
    // @see https://rpxnow.com/docs#sign-in_default_provider
    $options['attributes']['onmousedown'] = "RPXNOW.default_provider = '" . $provider['name'] . "';";
    $icons .= l(theme('rpx_icon', array('provider' => $provider['name'], 'size' => 'small')), $sign_in_url, $options);
  }
  $items[] = array(
    'data' => l((variable_get('rpx_signin_string', RPX_SIGNIN_STRING) == '') ? RPX_SIGNIN_STRING : variable_get('rpx_signin_string', RPX_SIGNIN_STRING), $sign_in_url, $options_template) . '<br />' . $icons,
    'class' => array ('rpx-link'),
  );

  $form['rpx_links'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array('class' => array('rpx-links')),
    '#weight' => 2,
  );

  return $form;
}

/**
 * Implements hook_comment_view_alter().
 *
 * Add Engage social sharing to comment links and, if a comment's just been
 * added, pop-up the social widget.
 *
 * @see rpx_widgets_comment_insert()
 */
function rpx_widgets_comment_view_alter(&$build) {
  // Should we bother?
  if ($build['#view_mode'] != 'full' ||
      !variable_get('rpx_social_pub', FALSE) ||
      !user_access('post comments') ||
      isset($build['#comment']->in_preview)) {

    return;
  }

  global $user;
  $comment = $build['#comment'];

  // We should attach the "share" link if it's the user's comment or if it's the
  // first comment view for the (possibly anonymous) user who posted it.
  $attach_share =
    variable_get('rpx_attach_share_link_to_comments', FALSE) &&
    (isset($user->name) && $comment->name == $user->name ||
     isset($_SESSION['rpx_comment_social_cid']) && $_SESSION['rpx_comment_social_cid'] == $comment->cid);

  // We should automatically pop up the Social Sharing widget if this is the
  // comment that has just been added.
  $popup_social =
    variable_get('rpx_comment_popup_social_at_once', 0) &&
    isset($_SESSION['rpx_comment_social_cid']) && $comment->cid == $_SESSION['rpx_comment_social_cid'];

  if (!$attach_share && !$popup_social) {
    return;
  }

  $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . request_uri() . '#comment-' . $comment->cid;

  // Prepare arguments for RPXNOW.Social.Activity().
  $social_args = array(
    'label' => t('Share your comment:'),
    'linktext' => check_plain($comment->subject),
    'link' => $url,
    'comment' => 'Commented on ' . variable_get('site_name', '') . '.',
    'summary' => text_summary(strip_tags($comment->comment_body[$comment->language][0]['safe_value']), NULL, 46) . '...',
  );
  $settings = array('rpx' => array());

  if ($attach_share) {
    // Pass arguments for the social widget that'll be attached to this comment.
    $settings['rpx']['rpx-link-social-comment-'. $comment->cid] = $social_args;

    // Attach a "share" link to this comment.
    $attributes = array(
      'class' => array('rpx-link-social'),
      'id' => 'rpx-link-social-comment-'. $comment->cid,
    );
    $build['links']['comment']['#links']['comment-rpx-share'] = array(
      'title' => t('share'),
      'href' => $url,
      'attributes' => $attributes,
    );
  }

  // Pass arguments for the social widget that will be invoked for this
  // comment immediately upon page reload.
  if ($popup_social) {
    $settings['rpx']['atonce'] = $social_args;
    unset($_SESSION['rpx_comment_social_cid']);
  }

  drupal_add_js($settings, 'setting');

  rpx_js();
  rpx_js_social();
}

/**
 * Implements hook_page_alter().
 *
 * Add Engage Javascript at the end of the page.
 */
function rpx_widgets_page_alter(&$page) {
  // Only do this globally
  if (variable_get('rpx_javascript_global', FALSE)) {
    rpx_js();
    if (variable_get('rpx_social_pub', FALSE)) {
      rpx_js_social();
    }
  }
}

/**
 * Adds Engage JS to the page (common for the sign-in and social sharing
 * functionality).
 */
function rpx_js() {
  static $added = FALSE;

  // Only attempt to add javascript once
  if ($added == TRUE) {
    return FALSE;
  }
  // Add the common JS code.
  $js = '    <!-- Begin Janrain Engage common. Visit http://www.rpxnow.com/ -->
    var rpxJsHost = (("https:" == document.location.protocol) ? "https://" : "http://static.");
    document.write(unescape("%3Cscript src=\'" + rpxJsHost + "rpxnow.com/js/lib/rpx.js\' type=\'text/javascript\'%3E%3C/script%3E"));
    <!-- End Janrain Engage common -->';
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  // Add the Signin-specific options.
  $realm = variable_get('rpx_realm', '');
  $flags = 'delay_domain_check';

  $output = '    <!-- Begin Janrain Engage Sign-In. Visit http://www.rpxnow.com/ -->';
  if (!(arg(0) == 'user' && arg(2) == 'rpx')) {
    $token_url = _rpx_token_url();
    $output .= '
    RPXNOW.token_url = "' . $token_url . '"';
  }
  else {
    $flags .= ',show_provider_list';
  }

  $output .= '
    RPXNOW.realm = "' . $realm . '";
    RPXNOW.overlay = true;
    RPXNOW.language_preference = "' . _rpx_locale() . '";
    RPXNOW.flags = "' . $flags . '";
    RPXNOW.ssl = ' . _rpx_ssl() . ';';
  $output .= '
    <!-- End Janrain Engage Sign-In -->';
  drupal_add_js($output, array('type' => 'inline', 'scope' => 'footer'));
  $added = TRUE;
}


/**
 * Adds Engage Social Sharing JS to the page.
 */
function rpx_js_social() {
  static $added = FALSE;

  // Only attempt to add javascript once
  if ($added == TRUE) {
    return FALSE;
  }

  // Add the common Engage JS code.
  rpx_js();

  // Add Social Sharing code.
  drupal_add_js(drupal_get_path('module', 'rpx_widgets') . '/rpx_widgets.js');
  $output = '    <!-- Begin Janrain Engage Social Sharing. Visit http://www.rpxnow.com/ -->
    RPXNOW.init({appId: "';
  $output .= variable_get('rpx_app_id', '') . '",xdReceiver: \'' . base_path() . drupal_get_path('module', 'rpx_core') . "/rpx_xdcomm.html'});";
  $output .= '
    <!-- End Janrain Engage Social Sharing -->';

  drupal_add_js($output, array('type' => 'inline', 'scope' => 'footer'));
  $added = TRUE;
}



/**
 * Returns the current Drupal locale if it is supported by Engage, otherwise
 * returns English.
 */
function _rpx_locale() {
  global $language;

  // Default to English
  $locale = 'en';
  if (in_array($language->language, RPX::locales())) {
    $locale = $language->language;
  }
  return $locale;
}

/**
 * Returns whether or not SSL is in use.
 */
function _rpx_ssl() {
  return (variable_get('rpx_realm_scheme', '') == 'https') ? 'true' : 'false';
}

/**
 * Returns markup for a specific provider icon.
 *
 * An image sprite with all Engage provider icons is included in the images
 * directory for custom theming purposes.
 */
function theme_rpx_icon($variables) {
  $provider = $variables['provider'];
  $style = array(
    'rpx-icon-' . $variables['size'],
    'rpx-' . $provider . '-' . $variables['size'],
  );
  if ($variables['style']) {
    $style[] = $variables['style'];
  }

  return '<div' . drupal_attributes(array('class' => $style, 'id' => 'rpx-' . $provider)) . '></div>';
}

/**
 * Returns markup for enabled sharing provider icons.
 */
function theme_rpx_social_icons() {
  $icons = '';
  $providers = explode(',', variable_get('rpx_social_pub'));
  foreach ($providers as $provider) {
    $icons .= theme('rpx_icon', array('provider' => $provider, 'size' => 'small'));
  }
  return $icons;
}

/**
 * Returns markup for the "share" button.
 */
function theme_rpx_share_button($variables) {
  $node = $variables['node'];
  $button_style = array(
    'rpx-button-social',
    'rpx-link-social',
  );
  $sharetip_style = array(
    'rpx-button-social-sharetip',
  );

  return '<div' . drupal_attributes(array('class' => $button_style, 'id' => 'rpx-link-social-node-'. $node->nid)) . '>share<span' . drupal_attributes(array('class' => $sharetip_style)) . '>Share this on:<br/>' . theme('rpx_social_icons') . '</span></div>';
}

/**
 * Implements hook_theme().
 */
function rpx_widgets_theme() {
  return array(
    'rpx_icon' => array(
      'variables' => array('provider' => NULL, 'size' => 'small', 'style' => NULL),
    ),
    'rpx_share_button' => array('node' => NULL),
    'rpx_social_icons' => array(),
  );
}

/**
 * Implements hook_node_view().
 *
 * Attaches the "share" button.
 */
function rpx_widgets_node_view($node, $view_mode) {
  // Are there any node types to attach to?
  $types = variable_get('rpx_attach_share_link_node_types', array());
  if(empty($types[$node->type]))
    return;

  // Should we attach to teasers?
  if($view_mode == 'teaser' && !variable_get('rpx_attach_share_link_to_teasers', 1))
    return;

  // Attach to node links section.
  if (variable_get('rpx_attach_share_link_to_nodelink', 1)) {
	$node->content['links']['#links']['rpx_share_button'] = array(
      'title' => _rpx_share_button($node),
      'html' => TRUE,
    );
  }

  // Attach to node contents section.
  if (variable_get('rpx_attach_share_link_to_nodecont', 1)) {
    $node->content['rpx_share_button'] = array(
      '#markup' => _rpx_share_button($node),
      '#weight' => variable_get('rpx_attach_share_link_to_nodecont_weight', 40),
    );
  }
}

/**
 * Returns HTML markup for the social sharing button.
 */
function _rpx_share_button($node) {
  $url = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . request_uri();
  $title = check_plain($node->title);

  // Pass arguments to RPXNOW.Social.Activity().
  $settings = array(
    'rpx' => array(
      'rpx-link-social-node-'.$node->nid => array(
        'label' => t('Comment:'),
        'linktext' => $title,
        'link' => $url,
        'comment' => 'Shared ' . $title . ' on ' . variable_get('site_name', '') . '.',
        'summary' => text_summary(strip_tags($node->body[$node->language][0]['safe_value']), NULL, 46) . '...',
      ),
    ),
  );
  drupal_add_js($settings, 'setting');

  rpx_js();
  rpx_js_social();
  return theme('rpx_share_button', array('node' => $node));
}

/**
 * Implements hook_comment_insert().
 *
 * @see rpx_widgets_comment_view_alter()
 */
function rpx_widgets_comment_insert($comment) {
  $_SESSION['rpx_comment_social_cid'] = $comment->cid;
}