<?php
// $Id: rpx_ui.install,v 1.11 2011/01/31 15:45:30 geokat Exp $

/**
 * @file
 *
 * Install, update and uninstall functions for the rpx_ui module.
 */

/**
 * Implements hook_install().
 *
 * In addition to supporting fresh installs of the module, we have to check for
 * D6 installations being upgraded to D7 (we can't use rpx_ui_update_7000()
 * because the module has been renamed).
 */
function rpx_ui_install() {
  // Auto-create some of the 'profile' Engage data fields.
  $fields = array(
    array('First Name', "['profile']['name']['givenName']"),
    array('Last Name', "['profile']['name']['familyName']"),
    array('Display Name', "['profile']['displayName']"),
    array('Gender', "['profile']['gender']"),
    array('Birthday', "['profile']['birthday']"),
    array('Phone Number', "['profile']['phoneNumber']"),
    array('Street Address', "['profile']['address']['streetAddress']"),
    array('City', "['profile']['address']['locality']"),
    array('State/Province', "['profile']['address']['region']"),
    array('Zipcode/Postal Code', "['profile']['address']['postalCode']"),
    array('Country', "['profile']['address']['country']"),
  );
  foreach ($fields as $field) {
    db_insert('rpx_profile_field')
      ->fields(array('title' => $field[0], 'path' => $field[1]))
      ->execute();
  }

  // Are we upgrading from Drupal 6?
  $authmaps = db_query("SELECT * FROM {authmap} WHERE module = 'rpx'")->fetchAllKeyed();
  if (!variable_get('rpx_extra_profile_data', FALSE) &&
      !variable_get('rpx_attach_share_link', FALSE) &&
      !count($authmaps)) {

    // Probably not, do nothing.
    return;
  }

  // Update variables.
  variable_set('rpx_attach_share_link_to_comments', variable_get('rpx_attach_share_link', 0));
  variable_del('rpx_attach_share_link');
  variable_del('rpx_extra_profile_data');
  variable_del('rpx_form_submitted');

  // Change the module name in authmap to 'rpx_core'.
  db_update('authmap')
    ->fields(array('module' => 'rpx_core'))
    ->condition('module', 'rpx')
    ->execute();

  // Migrate field mappings.
  if (!$old_map = variable_get('rpx_profile_fields_map', '')) {
    return;
  }
  $new_map = array();
  foreach ($old_map as $rpx_field => $drupal_field) {
    // Get fid for this field in Drupal 7.
    $fid = db_query("SELECT fid FROM {rpx_profile_field} WHERE path LIKE :pattern", array(
      ':pattern' => '%'. $rpx_field . '%',
    ))->fetchField();
    // Create the mapping.
    $new_map[$fid] = array(
      'set' => 'profile',
      'bundle' => '',
      'field' => $drupal_field,
    );
  }
  variable_set('rpx_profile_fields_map', $new_map);
}

/**
 * Implements hook_schema().
 */
function rpx_ui_schema() {
  $schema['rpx_profile_field'] = array(
    'description' => 'Stores Janrain Engage profile field information.',
    'fields' => array(
      'fid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique profile field ID.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Title of the field shown to the end user.',
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Path within Engage data in a PHP-like array notation.',
      ),
    ),
    'primary key' => array('fid'),
  );

  return $schema;
}

/**
 *  Rename rpx_attach_share_link variable.
 */
function rpx_ui_update_7001() {
  variable_set('rpx_attach_share_link_to_comments', variable_get('rpx_attach_share_link', 0));
  variable_del('rpx_attach_share_link');
}

/**
 *  Delete rpx_attach_share_link_nodes and rpx_form_submitted variables.
 */
function rpx_ui_update_7002() {
  variable_del('rpx_attach_share_link_nodes');
  variable_del('rpx_form_submitted');
}

/**
 *  Rename user_mail_rpx_* variables.
 */
function rpx_ui_update_7003() {
  if ($setting = variable_get('user_mail_rpx_confirm_email_body', FALSE)) {
    variable_set('rpx_mail_rpx_confirm_email_body', $setting);
    variable_del('user_mail_rpx_confirm_email_body');
  }

  if ($setting = variable_get('user_mail_rpx_confirm_email_subject', FALSE)) {
    variable_set('rpx_mail_rpx_confirm_email_subject', $setting);
    variable_del('user_mail_rpx_confirm_email_subject');
  }
}

/**
 * Implements hook_uninstall().
 */
function rpx_ui_uninstall() {
  variable_del('rpx_admin_url');
  variable_del('rpx_apikey');
  variable_del('rpx_app_id');
  variable_del('rpx_attach_login_form');
  variable_del('rpx_attach_share_link_to_comments');
  variable_del('rpx_attach_share_link_node_types');
  variable_del('rpx_attach_share_link_to_teasers');
  variable_del('rpx_attach_share_link_to_nodelink');
  variable_del('rpx_attach_share_link_to_nodecont');
  variable_del('rpx_attach_share_link_to_nodecont_weight');
  variable_del('rpx_comment_popup_social_at_once');
  variable_del('rpx_bypass_email_verification');
  variable_del('rpx_enabled_providers');
  variable_del('rpx_extended_authinfo');
  variable_del('rpx_force_registration_form');
  variable_del('rpx_import_profile_photo');
  variable_del('rpx_javascript_global');
  variable_del('rpx_openid_override');
  variable_del('rpx_profile_fields_map');
  variable_del('rpx_realm');
  variable_del('rpx_realm_scheme');
  variable_del('rpx_signin_string');
  variable_del('rpx_accounts_string');
  variable_del('rpx_user_help_text');
  variable_del('rpx_social_pub');
  variable_del('rpx_mail_rpx_confirm_email_body');
  variable_del('rpx_mail_rpx_confirm_email_subject');
}
