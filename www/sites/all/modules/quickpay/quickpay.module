<?php
/**
 * @file
 * Integrates quickpay.dk redirected payment service.
 *
 * Development sponsored by QuickPay.
 *
 * @todo hook_requirements should be implemented, so we can tell the
 * @todo user whether we're using bcmul/bcdiv.
 */

// The protocol version we implement for the API calls.
define('QUICKPAY_VERSION_API', '3');
// The protocol version we implement for the payment window.
define('QUICKPAY_VERSION_POST', '4');

/**
 * Implements hook_menu().
 */
function quickpay_menu() {
  $items['quickpay'] = array(
    'title' => 'QuickPay callback page',
    'page callback' => 'quickpay_callback',
    'page arguments' => array(1, 2),
    'access callback' => 'quickpay_md5_check',
    'type' => MENU_CALLBACK,
  );

  /* $items['quickpay_popdown'] = array( */
  /*   'title' => 'QuickPay popdown page', */
  /*   'page callback' => 'quickpay_popdown', */
  /*   'page arguments' => array(1, 2), */
  /*   'access callback' => 'variable_get', */
  /*   'access arguments' => array('quickpay_hosted_popup', TRUE), */
  /*   'type' => MENU_CALLBACK, */
  /* ); */

  return $items;
}

/**
 * Implements hook_element_info().
 *
 * Describe our custom payment method selection element.
 */
function quickpay_element_info() {
  $types['quickpay_payment_method'] = array(
    '#input' => TRUE,
    '#process' => array('quickpay_process_payment_method'),
    '#after_build' => array('quickpay_payment_method_after_build'),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'quickpay') . '/quickpay.js',
      ),
    ),
  );
  return $types;
}

/**
 * Implements hook_theme();
 */
function quickpay_theme() {
  return array(
    /* 'quickpay_cards' => array( */
    /*   'arguments' => array('cards' => array()), */
    /* ), */
    'quickpay_accepted_cards' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Access callback to check that the url parameters hasn't been tampered with.
 *
 * @see _quickpay_md5_path()
 */
function quickpay_md5_check() {
  $path = arg();
  $md5 = array_pop($path);
  if (md5(implode('/', $path) . variable_get('drupal_private_key', rand())) == $md5) {
    return TRUE;
  }
  else {
    $path[] = $md5;
    watchdog('quickpay', 'Arguments failed md5 sum check. Either someone is trying to abuse the site, or there is a bug somewhere. Path: @path', array('@path' => join('/', $path)), WATCHDOG_WARNING);
  }
  return FALSE;
}

/**
 * Information about all supported cards.
 */
function quickpay_cards() {
  $images_path = drupal_get_path('module', 'quickpay') . '/images/';
  return array(
    'dankort' => array(
      'name' => t('Dankort'),
      'image' => $images_path . 'dan.jpg',
    ),
    'edankort' => array(
      'name' => t('eDankort'),
      'image' => $images_path . 'edan.jpg',
    ),
    'visa' => array(
      'name' => t('Visa'),
      'image' => $images_path . 'visa.jpg',
    ),
    'visa-dk' => array(
      'name' => t('Visa, issued in Denmark'),
      'image' => $images_path . 'visa.jpg',
    ),
    '3d-visa' => array(
      'name' => t('Visa, using 3D-Secure'),
      'image' => $images_path . '3d-visa.gif',
    ),
    '3d-visa-dk' => array(
      'name' => t('Visa, issued in Denmark, using 3D-Secure'),
      'image' => $images_path . '3d-visa.gif',
    ),
    'visa-electron' => array(
      'name' => t('Visa Electron'),
      'image' => $images_path . 'visaelectron.jpg',
    ),
    'visa-electron-dk' => array(
      'name' => t('Visa Electron, issued in Denmark'),
      'image' => $images_path . 'visaelectron.jpg',
    ),
    '3d-visa-electron' => array(
      'name' => t('Visa Electron, using 3D-Secure'),
    ),
    '3d-visa-electron-dk' => array(
      'name' => t('Visa Electron, issued in Denmark, using 3D-Secure'),
    ),
    'mastercard' => array(
      'name' => t('Mastercard'),
      'image' => $images_path . 'mastercard.jpg',
    ),
    'mastercard-dk' => array(
      'name' => t('Mastercard, issued in Denmark'),
      'image' => $images_path . 'mastercard.jpg',
    ),
    '3d-mastercard' => array(
      'name' => t('Mastercard, using 3D-Secure'),
    ),
    '3d-mastercard-dk' => array(
      'name' => t('Mastercard, issued in Denmark, using 3D-Secure'),
    ),
    '3d-maestro' => array(
      'name' => t('Maestro'),
      'image' => $images_path . '3d-maestro.gif',
    ),
    '3d-maestro-dk' => array(
      'name' => t('Maestro, issued in Denmark'),
      'image' => $images_path . '3d-maestro.gif',
    ),
    'jcb' => array(
      'name' => t('JCB'),
      'image' => $images_path . 'jcb.jpg',
    ),
    '3d-jcb' => array(
      'name' => t('JCB, using 3D-Secure'),
      'image' => $images_path . '3d-jcb.gif',
    ),
    'diners' => array(
      'name' => t('Diners'),
      'image' => $images_path . 'diners.jpg',
    ),
    'diners-dk' => array(
      'name' => t('Diners, issued in Denmark'),
      'image' => $images_path . 'diners.jpg',
    ),
    'american-express' => array(
      'name' => t('American Express'),
      'image' => $images_path . 'amexpress.jpg',
    ),
    'american-express-dk' => array(
      'name' => t('American Express, issued in Denmark'),
      'image' => $images_path . 'amexpress.jpg',
    ),
    'danske-dk' => array(
      'name' => t('Danske Netbetaling'),
      'image' => $images_path . 'danskebank.jpg',
    ),
    'nordea-dk' => array(
      'name' => t('Nordea Netbetaling'),
      'image' => $images_path . 'nordea.jpg',
    ),
    'fbg1886' => array(
      'name' => t('Forbrugsforeningen'),
      'image' => $images_path . 'forbrugsforeningen.gif',
    ),
    'ikano' => array(
      'name' => t('Ikano'),
      'image' => $images_path . 'ikano.jpg',
    ),
  );
}

/**
 * Validation for the order_prefix setting.
 */
function quickpay_order_prefix_validate($element, &$form_state) {
  if (!preg_match('/^[a-zA-Z0-9]{0,15}$/', $element['#value'])) {
    form_error($element, t('Order prefix must only contain alphanumerics and be no longer than 15 characters.'));
  }
}

/**
 * Process our payment method element.
 *
 * Create the sub elements needed.
 */
function quickpay_process_payment_method($element) {
  if (is_array($element['#value'])) {
    $method = 'selected';
    $cards = $element['#value'];
  }
  else {
    $method = $element['#value'];
    $cards = array();
  }
  $element['method'] = array(
    '#type' => 'radios',
    '#title' => t('Accepted payment methods'),
    '#description' => t('Which payment methods to accept. NOTE: Some require special agreements.'),
    '#default_value' => $method,
    '#options' => array(
      'creditcard' => t('Creditcard'),
      '3d-creditcard' => t('3D-Secure Creditcard'),
      'selected' => t('Selected payment methods'),
    ),
    '#id' => drupal_html_id('quickpay-accepted-methods'),
  );

  $options = array();
  foreach (quickpay_cards() as $key => $card) {
    $options[$key] = (!empty($card['image']) ? theme('image', array('path' => $card['image'])) . '&nbsp;' : '') . $card['name'];
  }

  $element['cards'] = array(
    '#type' => 'checkboxes',
    '#theme' => 'quickpay_accepted_cards',
    '#title' => t('Selected payment methods'),
    '#default_value' => $cards,
    '#options' => $options,
    '#prefix' => '<div id=' . drupal_html_id('quickpay-accepted-cards') . '>',
    /* '#id' => drupal_html_id('quickpay-accepted-cards'), */
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('quickpay-cards')),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'quickpay') . '/quickpay.admin.css',
      ),
    ),
  );


  return $element;
}

/**
 * Theme function to render card checkboxes in three columns.
 */
function theme_quickpay_accepted_cards($variables) {
  $element = $variables['element'];
  foreach (element_children($element) as $key) {
    $children[$key] = $element[$key];
    unset($element[$key]);
  }
  $number_per_col = ceil(sizeof($children) / 3);
  $i = 1;
  while (sizeof($children) > 0){
    $column = array(
      '#prefix' => '<div class="column">',
      '#suffix' => '</div>',
    ) + array_splice($children, 0, $number_per_col);
    $element['col' . $i++] = $column;
  }
  return '<div class="clearfix">' . drupal_render_children($element) . '</div>';
}

/**
 * Element after build function.
 *
 * Now that child checkboxes and radios has done their work, claim it as our
 * own and brutally overwrite them.
 */
function quickpay_payment_method_after_build($element, &$form_state) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value['method'] == 'selected') {
    form_set_value($element, array_filter($value['cards']), $form_state);
  }
  else {
    form_set_value($element, $value['method'], $form_state);
  }
  return $element;
}

/* function theme_quickpay_cards($cards) { */
/*   drupal_add_css(drupal_get_path('module', 'quickpay') . '/quickpay.css'); */
/*   $output = "<div class='quickpay-cards'>"; */
/*   $i = 1; */
/*   foreach ($cards as $card) { */
/*     if ($card['image'] && !$rendered[$card['image']]) { */
/*       $output .= theme('image', $card['image'], $card['name'], $card['name'], */
/*                  array('class' => 'card-' . $i++), TRUE); */
/*       $rendered[$card['image']] = TRUE; */
/*     } */
/*   } */
/*   $output .= '</div>'; */
/*   return $output; */
/* } */

/**
 * Callback page.
 */
function quickpay_callback($id, $module) {
  $qp = module_invoke($module, 'quickpay_factory', $id);
  if (!($qp instanceof Quickpay)) {
    watchdog('quickpay', '@module did not return a Quickpay instance from hook_quickpay_factory, please file a bug-report with the developer. Transaction id: @id.', array('@module' => $module, '@id' => $id), WATCHDOG_ERROR);
    drupal_access_denied();
  }

  $transaction = $qp->transaction_callback();
  if (!$transaction) {
    // Quickpay->transaction_callback() already logged it.
    drupal_access_denied();
    return;
  }

  if (module_hook($module, 'quickpay_callback')) {
    module_invoke($module, 'quickpay_callback', $id, $transaction);
  }
  else {
    watchdog('quickpay', '@module does not implement hook_quickpay_callback, please file a bug-report with the developer. Transaction id: @id.', array('@module' => $module, '@id' => $id), WATCHDOG_ERROR);
  }
}

/**
 * The popup closer.
 *
 * Modules implementing hook_quickpay_popdown should return an url to
 * redirect to if they accepted handling the transaction, or
 * NULL/FALSE if not.
 *
 * In most cases there should only be one module implementing this
 * hook, but implementations should never the less check whether the
 * transaction is one they created by checking whether the id
 * corresponds to an active transaction.
 */
/* function quickpay_popdown($id, $status) { */
/*   if ($status != 'success') { */
/*     $status == 'cancel'; */
/*   } */

/*   // Let the first module that returns an url handle it. */
/*   foreach (module_implements('quickpay_popdown') as $module) { */
/*     if ($url = module_invoke($module, 'quickpay_popdown', $id, $status)) */
/*       break; */
/*   } */
/*   if ($url) { */
/*     echo '<html><head> */
/* <script type="text/javascript"> */
/* <!-- */
/* opener.location = "' . $url . '"; */
/* self.close(); */
/* // --> */
/* </script></head><body></body></html>'; */
/*     return NULL; */
/*   } */
/*   else { */
/*     drupal_access_denied(); */
/*   } */
/* } */

// --- Internal functions ---

/**
 * Return an md5 checksummed path.
 *
 * This allows us to create paths that's resistant to tampering. By appending
 * an md5 sum of the path and drupal_private_key, and checking the sum in
 * requests, it's not possible to change a path element. This means that we
 * can put data in the URL, and be sure it's not changed.
 */
function _quickpay_md5_path($path) {
  // The rand is to ensure failure if drupal_private_key haven't been set.
  return $path . '/' . md5($path . variable_get('drupal_private_key', rand()));
}
