<?php
/**
 * @file
 * Implementation of the QuickPay payment method for Ubercart.
 */

/**
 * Implements hook_uc_payment_method().
 */
function uc_quickpay_uc_payment_method() {
  $title = t('Credit card (via Quickpay secure gateway.)');

  $methods[] = array(
    'id' => 'quickpay',
    'name' => t('QuickPay'),
    'title' => t('Credit card'),
    'review' => t('Credit card'),
    'desc' => t('Pay securely by credit card via QuickPay.'),
    'callback' => 'uc_payment_method_quickpay',
    'weight' => 4,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the quickpay review form (a send button and some hidden fields used by
 * quickpay) to ubercarts checkout review form.
 */
function uc_quickpay_form_uc_cart_checkout_review_form_alter(&$form, &$form_state) {
  if (($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);

    // Only add the quickpay review form if the user has selected the quickpay
    // payment method.
    if ($order->payment_method == 'quickpay') {
      $quickpay_form = drupal_get_form('uc_quickpay_review_form', $order);

      // Remove the existing submit button.
      unset($form['actions']['submit']);

      // And add the quickpay form after the current review form.
      // The div just groups the 2 forms, perhaps it should be removed.
      $form['#prefix'] = '<div>';
      $form['#suffix'] = drupal_render($quickpay_form) . '</div>';
    }
  }
}

/**
 * Implements hook_theme().
 */
function uc_quickpay_theme($existing, $type, $theme, $path) {
  $base_theme = array(
    'file' => '/uc_quickpay.theme.inc',
  );

  $themes['uc_quickpay_by_order_form'] = $base_theme + array(
    'render element' => 'form',
  );
  $themes['uc_quickpay_authorized_comment'] = $base_theme + array(
    'variables' => array('txn' => NULL),
  );
  $themes['uc_quickpay_captured_comment'] = $base_theme + array(
    'variables' => array('txn' => NULL),
  );
  $themes['uc_quickpay_canceled_comment'] = $base_theme + array(
    'variables' => array('txn' => NULL),
  );
  $themes['uc_quickpay_refunded_comment'] = $base_theme + array(
    'variables' => array('txn' => NULL),
  );

  return $themes;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This adds the quickpay fieldset to the ubercart order payment tab.
 */
function uc_quickpay_form_uc_payment_by_order_form_alter(&$form, &$form_state) {
  $order = $form_state['build_info']['args'][0];

  // Make sure this order has a Quickpay transaction id.
  if (!isset($order->data['quickpay_txn_id'])) {
    return;
  }

  // Insert the quickpay form at the bottom of the payment window.
  $form['uc_quickpay'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quickpay'),
  );

  $form['uc_quickpay']['capture'] = array(
    '#type' => 'submit',
    '#value' => t('Capture'),
    '#validate' => array(),
    '#submit' => array('uc_quickpay_action_submit'),
  );
  $form['uc_quickpay']['capture_amount'] = array(
    '#type' => 'textfield',
    '#value' => t(uc_payment_balance($order)),
    '#size' => 20,
  );

  $form['uc_quickpay']['refund'] = array(
    '#type' => 'submit',
    '#value' => t('Refund'),
    '#validate' => array(),
    '#submit' => array('uc_quickpay_action_submit'),
    '#prefix' => '<br />',
  );
  $form['uc_quickpay']['refund_amount'] = array(
    '#type' => 'textfield',
    '#value' => t(uc_payment_balance($order)),
    '#size' => 20,
  );

  if (variable_get('uc_sign_after_amount', FALSE)) {
    $form['uc_quickpay']['capture_amount']['#field_prefix'] = '<span>' . variable_get('uc_currency_sign', '$') . '</span>';
    $form['uc_quickpay']['refund_amount']['#field_prefix'] = '<span>' . variable_get('uc_currency_sign', '$') . '</span>';
  }
  else {
    $form['uc_quickpay']['capture_amount']['#field_suffix'] = '<span>' . variable_get('uc_currency_sign', '$') . '</span>';
    $form['uc_quickpay']['refund_amount']['#field_suffix'] = '<span>' . variable_get('uc_currency_sign', '$') . '</span>';
  }
  // A quickfix to get the textfields up next to their buttons.
  drupal_add_css('#edit-uc-quickpay .form-item-capture-amount, #edit-uc-quickpay .form-item-refund-amount { display: inline; }', 'inline');

  $form['uc_quickpay']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#validate' => array(),
    '#submit' => array('uc_quickpay_action_submit'),
    '#prefix' => '<br />',
  );

  // Ubercarts original theme_ubercart_by_order_form doesn't allow for more form
  // elements (it hand-picks the form elements it needs). So we need our own
  // theme function to handle the output.
  $form['#theme'] = array('uc_quickpay_by_order_form');
}

/**
 * Handles the capture button added in the ubercart order payment tab.
 */
function uc_quickpay_action_submit($form, &$form_state) {
  $order = uc_order_load($form['order_id']['#value']);

  // These 3 functions are almost copy'paste. They should be build into 1.
  switch ($form_state['values']['op']) {
    case 'Capture':
      _uc_quickpay_capture($order->order_id, $order->data['quickpay_txn_id'], ($form_state['input']['capture_amount']));
      break;

    case 'Refund':
      _uc_quickpay_refund($order->order_id, $order->data['quickpay_txn_id'], ($form_state['input']['refund_amount']));
      break;

    case 'Cancel':
      _uc_quickpay_cancel($order->order_id, $order->data['quickpay_txn_id']);
      break;

  }
}

/**
 * This is a wrapper for capturing a payment simply by order id and
 * transaction id.
 */
function _uc_quickpay_capture($order_id, $txn_id, $amount) {
  global $user;
  $order = uc_order_load($order_id);
  $qp = new Quickpay($order->data['quickpay_settings']);
  $txn = $qp->transaction($txn_id);

  $txn->capture($amount);

  if ($txn->success()) {
    $payment_data = array(
      'type' => 'quickpay_txn_capture',
      'txn_id' => $txn->store(),
      'txn' => $txn,
    );

    // Add a payment to the order, with the amount of credits captured.
    uc_payment_enter($order_id, 'quickpay', $txn->amount(), $user->uid, serialize($payment_data), theme('uc_quickpay_captured_comment', array('txn' => $txn)));
  }
  else {
    drupal_set_message(t("Payment capture failed."), 'error');
    drupal_set_message($txn->qpstatmsg, 'error');
  }
}

/**
 * Wrapper for refunding
 */
function _uc_quickpay_refund($order_id, $txn_id, $amount) {
  global $user;
  $order = uc_order_load($order_id);
  $qp = new Quickpay($order->data['quickpay_settings']);
  $txn = $qp->transaction($txn_id);

  $txn->refund($amount);

  if ($txn->success()) {
    $payment_data = array(
      'type' => 'quickpay_txn_refund',
      'txn_id' => $txn->store(),
      'txn' => $txn,
    );

    // Add a payment to the order, with the amount of credits captured.
    uc_payment_enter($order_id, 'quickpay', -$txn->amount(), $user->uid, serialize($payment_data), theme('uc_quickpay_refunded_comment', array('txn' => $txn)));
  }
  else {
    drupal_set_message(t("Payment refund failed."), 'error');
    drupal_set_message($txn->qpstatmsg, 'error');
  }
}

/**
 * Wrapper for refunding
 */
function _uc_quickpay_cancel($order_id, $txn_id) {
  global $user;
  $order = uc_order_load($order_id);
  $qp = new Quickpay($order->data['quickpay_settings']);
  $txn = $qp->transaction($txn_id);

  $txn->cancel();

  if ($txn->success()) {
    $payment_data = array(
      'type' => 'quickpay_txn_cancel',
      'txn_id' => $txn->store(),
      'txn' => $txn,
    );

    // Add a payment to the order, with the amount of credits captured.
    uc_payment_enter($order_id, 'quickpay', -$txn->amount(), $user->uid, serialize($payment_data), theme('uc_quickpay_canceled_comment', array('txn' => $txn)));
  }
  else {
    drupal_set_message(t("Payment cancel failed."), 'error');
    drupal_set_message($txn->qpstatmsg, 'error');
  }
}

/**
 * Add the quickpay settings form to the quickpay payment method.
 */
function uc_payment_method_quickpay($op) {
  switch ($op) {
    case 'cart-details':
      return;
      break;

    case 'settings':
      $settings = variable_get('uc_quickpay_settings', array());

      // Make the fieldset, where we place the settings form, and
      // additional settings.
      $form['uc_quickpay_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Quickpay settings'),
        '#tree' => TRUE,
      );

      // Add the Quickpay settings form.
      $form['uc_quickpay_settings'] += Quickpay::settings_form($settings);

      // Add settings, allowing the user to specify custom callback urls.
      $form['uc_quickpay_settings']['callbacks'] = array(
        '#type' => 'fieldset',
        '#title' => t('Callbacks'),
        '#description' => t('Quickpay callback urls.'),
        '#tree' => TRUE,
      );
      $form['uc_quickpay_settings']['callbacks']['continue_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Continue URL'),
        '#description' => t('After a successful transaction.'),
        '#default_value' => (isset($settings['callbacks']['continue_url']) ? $settings['callbacks']['continue_url'] : 'cart/checkout/complete/'),
      );
      $form['uc_quickpay_settings']['callbacks']['cancel_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Cancel URL'),
        '#description' => t('If the user cancels the quickpay transaction.'),
        '#default_value' => (isset($settings['callbacks']['cancel_url']) ? $settings['callbacks']['cancel_url'] : 'cart/checkout/'),
      );

      $form = system_settings_form($form);
      return $form;
      break;

  }
}

/**
 * The form added to the ubercart reviews form, at the end of a checkout.
 */
function uc_quickpay_review_form($form, &$form_state, $order) {
  $settings = variable_get('uc_quickpay_settings');
  $qp = new Quickpay($settings);
  $order_id = $order->order_id;
  $options = array(
    'continue_url' => url($settings['callbacks']['continue_url'], array('absolute' => TRUE)),
    'cancel_url' => url($settings['callbacks']['cancel_url'], array('absolute' => TRUE)),
  );

  // The do_complete session variable is used by ubercart, when it's completing
  // the order, see the uc_cart_checkout_complete() function in
  // uc_cart.pages.inc. If the user has specified their own custom callback
  // function, this step isn't needed, but to avoid confusion in the settings
  // form it's always set.
  $_SESSION['uc_checkout'][$order->order_id]['do_complete'] = TRUE;

  return $qp->form($order_id, $order->order_total, $order->currency, 'uc_quickpay', $options);
}

/**
 * Implements hook_quickpay_factory().
 */
function uc_quickpay_quickpay_factory($order_id) {
  return new Quickpay(variable_get('uc_quickpay_settings'));
}

/**
 * Implements hook_quickpay_callback().
 */
function uc_quickpay_quickpay_callback($order_id, $txn) {
  // If the transaction has failed, we don't add any payment.
  if (!$txn->success()) {
    return;
  }


  $payment_data = array(
    'type' => 'quickpay_txn_ready',
    'txn_id' => $txn->store(),
    'txn' => $txn,
  );
  $order = uc_order_load($order_id);
  $order->data['quickpay_settings'] = variable_get('uc_quickpay_settings');
  $order->data['quickpay_txn_id'] = $payment_data['txn_id'];
  uc_order_save($order);

  uc_payment_enter($order_id, 'quickpay', 0, 0, serialize($payment_data), theme('uc_quickpay_authorized_comment', array('txn' => $txn)));
}
