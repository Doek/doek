<?php

// $Id$

/**
 * @file
 * Implements QuickPay payment method for Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_quickpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['quickpay'] = array(
    'base' => 'commerce_quickpay',
    'title' => t('QuickPay Payment Gateway'),
    'short_title' => t('QuickPay'),
    'description' => t('QuickPay Payment Gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 *
 */
function commerce_quickpay_menu() {
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/capture'] = array(
    'title' => 'Capture',
    'page callback' => 'commerce_quickpay_transaction_capture',
    'page arguments' => array(5),
    'access callback' => 'commerce_quickpay_transaction_access',
    'access arguments' => array('capture', 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'commerce_quickpay_transaction_cancel',
    'page arguments' => array(5),
    'access callback' => 'commerce_quickpay_transaction_access',
    'access arguments' => array('cancel', 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}

/**
 *
 */
function commerce_quickpay_transaction_access($op, $transaction) {
  if ($transaction->payment_method != 'quickpay') {
    return FALSE;
  }

  switch ($op) {
    case 'capture':
    case 'cancel':
      if ($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 *
 */
function commerce_quickpay_transaction_capture($transaction) {
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $qp = new Quickpay($payment_method['settings']);
  $txn = $qp->transaction($transaction->remote_id);

  $amount = commerce_currency_amount_to_decimal($transaction->amount, $transaction->currency_code);

  $txn->capture($amount);
  $transaction->payload[REQUEST_TIME] = $txn;

  if ($txn->success()) {
    drupal_set_message(t("Payment completed."));
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  else {
    drupal_set_message(t("Payment capture failed."), 'error');
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
  drupal_goto('admin/commerce/orders/' . $transaction->transaction_id . '/payment');
}

/**
 *
 */
function commerce_quickpay_transaction_cancel($transaction) {
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $qp = new Quickpay($payment_method['settings']);
  $txn = $qp->transaction($transaction->remote_id);

  $txn->cancel();
  $transaction->payload[REQUEST_TIME] = $txn;

  if ($txn->success()) {
    drupal_set_message(t("Payment cancelled."));
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    drupal_set_message(t("Payment cancellation failed."), 'error');
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
  drupal_goto('admin/commerce/orders/' . $transaction->transaction_id . '/payment');
}

/**
 * Payment method callback for settings form.
 */
function commerce_quickpay_settings_form($settings) {
  return Quickpay::settings_form($settings);
}

/**
 * Returns the form to redirect to QuickPay.
 */
function commerce_quickpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  // if (empty($payment_method->settings['id_carteira'])) {
  //   drupal_set_message(t('MoIP HTML Integration is not configured for use. No MoIP e-mail address has been specified.'), 'error');
  //   return array();
  // }

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  // Commerce already converted the amount to the lowest unit, but
  // Quickpay::form() expect to do it itself. So we convert it back.
  $total = commerce_currency_amount_to_decimal($total, $currency_code);

  /* $settings = $payment_method->settings; */
  try {
    $qp = new Quickpay($payment_method['settings']);
  }
  catch (Exception $e) {
    drupal_set_message(t("Quickpay payment haven't been properly configured. Consult the log for details."), 'error');
    watchdog('commerce_quickpay', 'Quickpay payment failed, message: @message', array('@message' => $e->getMessage()), WATCHDOG_EMERGENCY);
    return array();
  }

  $options = array(
    'continue_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'cancel_url' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );
  $form = $qp->form($order->order_number, $total, $currency_code, 'commerce_quickpay', $options);

  return $form;
}

/**
 * Implements hook_quickpay_factory().
 */
function commerce_quickpay_quickpay_factory($order_id) {
  // Load order.
  $order = commerce_order_load($order_id);
  // Get the payment_method from it.
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  return new Quickpay($payment_method['settings']);
}

/**
 * Implements hook_quickpay_callback().
 */
function commerce_quickpay_quickpay_callback($order_id, $txn) {
  // Load order.
  $order = commerce_order_load($order_id);
  // Get the payment_method from it.
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  // Create transaction.
  $transaction = commerce_payment_transaction_new('quickpay', $order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $txn->store();
  $transaction->message = $txn->qpstatmsg;
  $transaction->amount = commerce_currency_decimal_to_amount($txn->amount, $txn->currency);
  $transaction->currency_code = $txn->currency;
  $transaction->payload[REQUEST_TIME] = $txn;

  if ($txn->success()) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
}