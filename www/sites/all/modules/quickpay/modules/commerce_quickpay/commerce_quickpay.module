<?php

/**
 * @file
 * Implements QuickPay payment method for Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_quickpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['quickpay'] = array(
    'base' => 'commerce_quickpay',
    'title' => t('QuickPay Payment Gateway'),
    'short_title' => t('QuickPay'),
    'description' => t('QuickPay Payment Gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_quickpay_menu() {
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_quickpay_transaction_capture_form', 3, 5),
    'access callback' => 'commerce_quickpay_transaction_access',
    'access arguments' => array('capture', 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 1,
  );

  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_quickpay_transaction_cancel_form', 3, 5),
    'access callback' => 'commerce_quickpay_transaction_access',
    'access arguments' => array('cancel', 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
  );

  return $items;
}

/**
 * Menu access callback.
 */
function commerce_quickpay_transaction_access($op, $transaction) {
  if ($transaction->payment_method != 'quickpay') {
    return FALSE;
  }

  switch ($op) {
    case 'capture':
    case 'cancel':
      if ($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 * Capture form.
 */
function commerce_quickpay_transaction_capture_form($form, &$form_state, $order, $transaction) {
  $form_state['order'] = $order;
  $form_state['transaction'] = $transaction;
  $form_state['payment_method'] = commerce_payment_method_instance_load($transaction->instance_id);

  $qp = new Quickpay($form_state['payment_method']['settings']);
  $txn = $qp->transaction($transaction->remote_id);
  // Calculate how much is left of the authorization (we might have partially
  // captured it).
  $txn_amount = Quickpay::wire_amount($txn->balance(), $txn->currency());

  $balance = commerce_payment_order_balance($order);

  if ($balance['amount'] > 0 && $balance['amount'] < $txn_amount) {
     $default_amount = $balance['amount'];
   }
   else {
     $default_amount = $txn_amount;
   }

  // Convert the price amount to a user friendly decimal value.
  $default_amount = commerce_currency_amount_to_decimal($default_amount, $transaction->currency_code);

  $description = implode('<br />', array(
                   t('Authorization: @amount', array('@amount' => commerce_currency_format($transaction->amount, $transaction->currency_code))),
                   t('Order balance: @balance', array('@balance' => commerce_currency_format($balance['amount'], $balance['currency_code']))),
                 ));

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Capture amount'),
    '#description' => $description,
    '#default_value' => $default_amount,
    '#field_suffix' => check_plain($transaction->currency_code),
    '#size' => 16,
   );

  if ($txn->splitpayment) {
    $form['finalize'] = array(
      '#type' => 'checkbox',
      '#title' => t('Finalize'),
      '#description' => t('When the transaction is finalized, no further capture is possible.'),
      '#default_value' => '0',
   );
  }
  else {
    $form['finalize'] = array(
      '#type' => 'value',
      '#value' => '1',
    );

    $form['warning'] = array(
      '#type' => 'markup',
      '#markup' => t('<em>Warning:</em> No further capture will be possible.'),
    );
  }
  $form = confirm_form($form,
          t('What amount do you want to capture?'),
          'admin/commerce/orders/' . $order->order_id . '/payment',
          '',
          t('Capture'),
          t('Cancel'),
          'confirm'
   );

   return $form;
}

/**
 * Validate handler: ensure a valid amount is given.
 */
function commerce_quickpay_transaction_capture_form_validate($form, &$form_state) {
  $transaction = $form_state['transaction'];
  $amount = $form_state['values']['amount'];

  $qp = new Quickpay($form_state['payment_method']['settings']);
  $txn = $qp->transaction($transaction->remote_id);

  // Ensure a positive numeric amount has been entered for capture.
  if (!is_numeric($amount) || $amount <= 0) {
    form_set_error('amount', t('You must specify a positive numeric amount to capture.'));
  }

  // Ensure the amount is less than or equal to the authorization amount.
  if ($amount > $txn->balance()) {
    form_set_error('amount', t('You cannot capture more than you authorized through QuickPay.'));
  }
}

/**
 * Submit handler: capture payment.
 */
function commerce_quickpay_transaction_capture_form_submit($form, &$form_state) {
  $transaction = $form_state['transaction'];
  $amount = $form_state['values']['amount'];
  $finalize = $form_state['values']['finalize'] == 1;

  $qp = new Quickpay($form_state['payment_method']['settings']);
  $txn = $qp->transaction($transaction->remote_id);

  if ($amount == $txn->balance()) {
    $finalize = TRUE;
  }
  $txn->capture($amount, $finalize);
  $transaction->payload[REQUEST_TIME] = $txn;

  if ($txn->success()) {
    drupal_set_message(t("Payment captured."));
    // Complete the transaction if finalized, or we captured the
    if ($finalize) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      // Update status so balance is updated.
      $txn->status();
      // Update the transaction amount to the actual captured amount. Do that by
      // taking the original (authorized) amount, and subtracting the current
      // balance.
      $transaction->amount -= commerce_currency_decimal_to_amount($txn->balance(), $transaction->currency_code);
    }
    $transaction->message .= '<br />' . t('Captured @amount: @date', array('@date' => format_date(REQUEST_TIME, 'short'), '@amount' => $amount));
  }
  else {
    drupal_set_message(t('Payment capture failed, message: "@message".', array('@message' => $txn->qpstatmsg)), 'error');
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }

  commerce_payment_transaction_save($transaction);

  $form_state['redirect'] = 'admin/commerce/orders/' . $form_state['order']->order_id . '/payment';
}

/**
 * Cancel transaction form.
 */
function commerce_quickpay_transaction_cancel_form($form, &$form_state, $order, $transaction) {
  $form_state['order'] = $order;
  $form_state['transaction'] = $transaction;

  // Load and store the payment method instance for this transaction.
  $form_state['payment_method'] = commerce_payment_method_instance_load($transaction->instance_id);

  $form['markup'] = array(
    '#markup' => t('Are you sure that you want to cancel this transaction?'),
  );

  $form = confirm_form($form,
    t('Are you sure that you want to cancel this transaction?'),
    'admin/commerce/orders/' . $order->order_id . '/payment',
    '',
    t('Cancel transaction'),
    t('Cancel'),
    'confirm'
  );

  return $form;
}

/**
 * Submit handler: cancel the transaction.
 */
function commerce_quickpay_transaction_cancel_form_submit($form, &$form_state) {
  $transaction = $form_state['transaction'];

  $qp = new Quickpay($form_state['payment_method']['settings']);
  $txn = $qp->transaction($transaction->remote_id);

  $txn->cancel();
  $transaction->payload[REQUEST_TIME] = $txn;

  if ($txn->success()) {
    drupal_set_message(t("Payment cancelled."));
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    drupal_set_message(t('Payment cancellation failed, message: "@message".', array($txn->qpstatmsg)), 'error');
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }

  commerce_payment_transaction_save($transaction);

  $form_state['redirect'] = 'admin/commerce/orders/' . $form_state['order']->order_id . '/payment';
}

/**
 * Payment method callback for settings form.
 */
function commerce_quickpay_settings_form($settings) {
  return Quickpay::settings_form($settings);
}

/**
 * Returns the form to redirect to QuickPay.
 */
function commerce_quickpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  // if (empty($payment_method->settings['id_carteira'])) {
  //   drupal_set_message(t('MoIP HTML Integration is not configured for use. No MoIP e-mail address has been specified.'), 'error');
  //   return array();
  // }

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  // Commerce already converted the amount to the lowest unit, but
  // Quickpay::form() expect to do it itself. So we convert it back.
  $total = commerce_currency_amount_to_decimal($total, $currency_code);

  /* $settings = $payment_method->settings; */
  try {
    $qp = new Quickpay($payment_method['settings']);
  }
  catch (Exception $e) {
    drupal_set_message(t("Quickpay payment haven't been properly configured. Consult the log for details."), 'error');
    watchdog('commerce_quickpay', 'Quickpay payment failed, message: @message', array('@message' => $e->getMessage()), WATCHDOG_EMERGENCY);
    return array();
  }

  $options = array(
    'continue_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'cancel_url' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );
  $form = $qp->form($order->order_number, $total, $currency_code, 'commerce_quickpay', $options);

  return $form;
}

/**
 * Implements hook_quickpay_factory().
 */
function commerce_quickpay_quickpay_factory($order_id) {
  // Load order.
  $order = commerce_order_load($order_id);
  // Get the payment_method from it.
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  return new Quickpay($payment_method['settings']);
}

/**
 * Implements hook_quickpay_callback().
 */
function commerce_quickpay_quickpay_callback($order_id, $txn) {
  // Load order.
  $order = commerce_order_load($order_id);
  // Get the payment_method from it.
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  // Create transaction.
  $transaction = commerce_payment_transaction_new('quickpay', $order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $txn->store();
  $transaction->message = $txn->qpstatmsg;
  $transaction->amount = commerce_currency_decimal_to_amount($txn->amount, $txn->currency);
  $transaction->currency_code = $txn->currency;
  $transaction->payload[REQUEST_TIME] = $txn;

  if ($txn->success()) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
}
