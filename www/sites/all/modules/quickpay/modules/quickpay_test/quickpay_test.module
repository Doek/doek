<?php

/**
 * @file
 * Module for testing/debugging the Quickpay payment window.
 *
 * The module defines a page callback that will present the form that
 * redirects to Quickpay, and output what came back through the
 * callback.
 */

/**
 * Implements hook_menu().
 */
function quickpay_test_menu() {
  $items['admin/config/development/quickpay_test'] = array(
    'title' => 'Quickpay payment window test',
    'description' => 'Test that the Quickpay payment window works properly.',
    'page callback' => 'quickpay_test_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/development/quickpay_test/continue/%'] = array(
    'title' => 'Quickpay continue page',
    'page callback' => 'quickpay_test_continue_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/development/quickpay_test/cancel'] = array(
    'title' => 'Quickpay cancel page',
    'page callback' => 'quickpay_test_cancel_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback.
 *
 * Displays the settings form, and, if properly configured, the link
 * to the payment window.
 */
function quickpay_test_page() {
  $build = array(
    'settings' => drupal_get_form('quickpay_test_settings_form'),
  );
  try {
    $payment_form = drupal_get_form('quickpay_test_form');
    $build['test_form'] = array(
      '#type' => 'fieldset',
      '#title' => t('Test settings'),
      'payment' => $payment_form,
    );
  }
  catch (QuickpayException $e) {
  }
  return $build;
}

/**
 * Form builder.
 */
function quickpay_test_settings_form() {
  $form['quickpay_test_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quickpay settings'),
    '#description' => t("These settings used for testing. The payment window link will appear below when these settings are properly set."),
    '#tree' => TRUE,
  );
  $form['quickpay_test_settings'] += Quickpay::settings_form(_quickpay_test_settings());
  // Disable editing of test_mode, we'll enforce it anyway.
  $form['quickpay_test_settings']['test_mode']['#disabled'] = TRUE;
  return system_settings_form($form);
}

/**
 * Show a payment form to the user.
 */
function quickpay_test_form() {
  $qp = new Quickpay(_quickpay_test_settings());
  $order_id = time();
  $options = array(
    'continue_url' => url('admin/config/development/quickpay_test/continue/' . $order_id, array('absolute' => TRUE)),
    'cancel_url' => url('admin/config/development/quickpay_test/cancel/' . $order_id, array('absolute' => TRUE)),
  );
  return $qp->form($order_id, 100, 'DKK', 'quickpay_test', $options);
}

/**
 * Page for successful payments.
 */
function quickpay_test_continue_page($order_id) {
  // @todo dig out last transaction callback, and print it out.
  return print_r(variable_get('quickpay_test_transactions', array()), TRUE);
}

/**
 * Page for cancelled payments.
 */
function quickpay_test_cancel_page($order_id) {
  return "Payment cancelled.";
}

/**
 * Implements hook_quickpay_factory().
 */
function quickpay_test_quickpay_factory($order_id) {
  return new Quickpay(_quickpay_test_settings());
}

/**
 * Callback from Quickpay.
 */
function quickpay_test_quickpay_callback($order_id, $txn) {
  // Save the transaction where quickpay_test_continue_page can get at it.
  $txns = variable_get('quickpay_test_transactions', array());
  $txns[$order_id] = $txn;
  variable_set('quickpay_test_transactions', $txn);
}

/**
 * Get the Quickpay settings we use.
 *
 * Enforces the use of testmode. If no settings has been saved, it Will use
 * the quickpay_test variable, if defined, as a convenience for developers.
 */
function _quickpay_test_settings() {
  $settings = variable_get('quickpay_test_settings', variable_get('quickpay_test', array()));
  // Always use test mode.
  $settings['test_mode'] = TRUE;
  return $settings;
}
