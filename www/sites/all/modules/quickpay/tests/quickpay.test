<?php

/**
 * @file
 *
 * Simple test suite for the QuickPay module. Only tests the core API.
 */

class QuickPayUnitTest extends DrupalUnitTestCase {
  /**
   * Implementation of get_info() for information
   */
  function getInfo() {
    return array(
      'name' => t('QuickPay'),
      'description' => t("Tests that core QuickPay functions work. <em>WARNING:</em> This assumes that the used QuickPay account is running in test mode. Don't run this on a production account."),
      'group' => 'Quickpay Tests',
    );
  }

  /**
   * Setup for tests.
   */
  function setUp() {
    $settings = variable_get('quickpay_test', array());
    $settings['order_prefix'] .= time() . 't';
    parent::setup('quickpay');
    $this->qp = new Quickpay($settings);
  }

  /**
   * Test core functionality.
   */
  function testCore() {
    $txn = $this->qp->authorize('4571222233334444', '0319', '123', 1, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    // This should fail.
    $txn->capture(200);
    $this->assertFalse($txn->success(), "Cannot capture more than authorized");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    $txn2 = $this->qp->transaction($txn->store());
    $this->assertTrue(!empty($txn2->history), "History is not empty when asking for status.");

    // But this should work.
    $txn->capture(100);
    $this->assertTrue($txn->success(), "Can capture authorized amount.");
    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

    $txn2 = $this->qp->transaction($txn->store());
    $this->assertTrue(!empty($txn2->history), "History is not empty when asking for status.");

    // Lets try partial capture...
    $txn = $this->qp->authorize('4571222233334444', '0319', '123', 2, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    // This should work.
    $txn->capture(50);
    $this->assertTrue($txn->success(), "Can capture less than authorized amount.");
    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

    // As we didn't specify split payments, we can't capture any more.
    $txn->capture(50);
    $this->assertFalse($txn->success(), "Cannot capture the rest of the authorized amount.");
    debug($txn->history);
  }

  /**
   * Test autocapture.
   */
  function testAutocapture() {
    $txn = $this->qp->authorize('4571222233334444', '0319', '123', 1, 100, 'DKK', array('autocapture' => TRUE));
    $this->assertTrue($txn->success(), "Authorize with autocapture works.");
    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

    // This should fail.
    $txn->capture(1);
    $this->assertFalse($txn->success(), "Cannot capture on autocaptured transaction");
  }

  /**
   * Test split payments.
   */
  function testSplitpayment() {
    // Lets try partial capture...
    $txn = $this->qp->authorize('4571222233334444', '0319', '123', 4, 100, 'DKK', array('splitpayment' => TRUE));
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    // This should work.
    $txn->capture(50);
    $this->assertTrue($txn->success(), "Can capture less than authorized amount.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is still 'authorized'.");

    // Capture some more and finalize.
    $txn->capture(25, TRUE);
    $this->assertTrue($txn->success(), "Can capture some more of the authorized amount.");
    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

    // As we've finalized the transaction, we can't capture any more.
    $txn->capture(5);
    $this->assertFalse($txn->success(), "Cannot capture the rest of the authorized amount.");

    debug($txn->history);
  }

  /**
   * Test renew.
   */
  function testRenew() {
    $txn = $this->qp->authorize('4571222233334444', '0319', '123', 5, 100, 'DKK', array('splitpayment' => TRUE));
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    $txn->renew();
    // Not much we can check but that the request didn't fail.
    $this->assertTrue($txn->success(), "Renew works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");
  }

  /**
   * Test cancel.
   */
  function testCancel() {
    $txn = $this->qp->authorize('4571222233334444', '0319', '123', 6, 100, 'DKK', array('splitpayment' => TRUE));
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    $txn->cancel();
    $this->assertTrue($txn->success(), "Cancel works.");
    // Check that the transaction state is now cancel.
    $this->assertTrue($txn->state == QuickpayTransaction::CANCELLED, "Transaction state is 'cancelled'.");
  }

  /**
   * Test refunds.
   */
  function testRefund() {
    // Create a transaction.
    $txn = $this->qp->authorize('4571222233334444', '0319', '123', 7, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    // Capture part.
    $txn->capture(50);
    $this->assertTrue($txn->success(), "Can capture less than authorized amount.");
    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

    // Refund some.
    $txn->refund(20);
    $this->assertTrue($txn->success(), "Can refund part of captured amount.");
    $this->assertTrue($txn->state == QuickpayTransaction::REFUNDED, "Transaction state is 'refunded'.");
    debug($txn);

  }

  /**
   * Test subscribe.
   */
  function testSubscribe() {
    // Create a transaction.
    $sub_txn = $this->qp->subscribe('4571222233334444', '0319', '123', 8, 'test subscription');
    $this->assertTrue($sub_txn->success(), "Subscribe works.");
    $this->assertTrue($sub_txn->state == QuickpayTransaction::SUBSCRIBED, "Transaction state is 'subscribed'.");

    // Use the subscribed transaction to authorize a payment.
    $txn = $sub_txn->recurring(9, 100, 'DKK');
    $this->assertTrue($txn->success(), "Recurring works.");
    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

    // Capture.
    $txn->capture(100);
    $this->assertTrue($txn->success(), "Can capture from subscription.");
    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

    // Use the subscribed transaction to authorize another payment.
    $txn = $sub_txn->recurring(10, 100, 'DKK', array('autocapture' => TRUE));
    $this->assertTrue($txn->success(), "Recurring with autocapture works.");
    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

    $sub_txn->cancel();
    debug($sub_txn);
    $this->assertTrue($sub_txn->success(), "Cancelling subscription works.");
    $this->assertTrue($sub_txn->state == QuickpayTransaction::CANCELLED, "Transaction state is 'cancelled'.");

    $txn = $sub_txn->recurring(11, 100, 'DKK');
    $this->assertFalse($txn->success(), "Recurring on cancelled subscription doesn't work.");
    debug($txn);
    /* $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'subscribed'."); */

  }

  /**
   * Test status.
   */
  function testStatus() {
    try {
      $txn = $this->qp->transaction('1');
      $txn->amount();
      $this->fail("Using non-existent transaction throws an exception.");
    }
    catch (QuickpayException $e) {
      $this->pass("Using non-existent transaction throws an exception.");
    }
  }
}
