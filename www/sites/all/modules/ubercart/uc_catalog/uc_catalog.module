<?php
// $Id: uc_catalog.module,v 1.55 2010/11/30 22:22:48 islandusurper Exp $

/**
 * @file
 * Ubercart Catalog module.
 *
 * Provides classification and navigation product nodes using taxonomy. When
 * installed, this module creates a vocabulary named "Product Catalog" and stores
 * the vocabulary id for future use. The user is responsible for maintaining the
 * terms in the taxonomy, though the Catalog will find products not listed in it.
 */

/**
 * Data structure to mimic Drupal's menu system.
 */
class UcTreeNode {
  public $tid = 0;
  public $name = 'Catalog';
  public $children = array();
  public $depth = -1;
  public $sequence = 0;

  /**
   * Constructor.
   */
  function __construct($term = NULL) {
    if ($term) {
      $this->tid = $term->tid;
      $this->name = $term->name;
      $this->depth = $term->depth;
      $this->sequence = $term->sequence;
    }
  }

  /**
   * Determine if new child is an immediate descendant or not.
   *
   * This function is completely dependent on the structure of the array returned
   * by taxonomy_get_tree(). Each element in the array knows it's depth in the tree
   * and the array is a preorder iteration of the logical tree structure. Therefore,
   * if the parameter is more than one level deeper than $this, it should be passed
   * to the last child of $this.
   */
  function add_child(&$child) {
    if ($child->depth - $this->depth == 1) {
      $this->children[] = $child;
    }
    else {
      $last_child =&$this->children[count($this->children)-1];
      $last_child->add_child($child);
    }
  }
}

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implement hook_menu().
 */
function uc_catalog_menu() {
  global $user;
  $items = array();

  $items['catalog'] = array(
    'title callback' => 'variable_get',
    'title arguments' => array('uc_catalog_name', t('Catalog')),
    'page callback' => 'uc_catalog_browse',
    'access arguments' => array('view catalog'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['admin/store/settings/catalog'] = array(
    'title' => 'Catalog settings',
    'description' => 'Configure the catalog settings.',
    'page callback' => 'uc_catalog_settings_overview',
    'access arguments' => array('administer catalog'),
    'file' => 'uc_catalog.admin.inc',
  );
  $items['admin/store/settings/catalog/overview'] = array(
    'title' => 'Overview',
    'access arguments' => array('administer catalog'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_catalog.admin.inc',
  );
  $items['admin/store/settings/catalog/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_catalog_settings_form'),
    'access arguments' => array('administer catalog'),
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_catalog.admin.inc',
  );
  $items['admin/store/settings/catalog/edit/catalog'] = array(
    'title' => 'Catalog settings',
    'weight' => -10,
    'access arguments' => array('administer catalog'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_catalog.admin.inc',
  );
  $items['admin/store/settings/catalog/edit/grid'] = array(
    'title' => 'Product grid settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_catalog_grid_settings_form'),
    'access arguments' => array('administer catalog'),
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_catalog.admin.inc',
  );
  $items['admin/store/products/orphans'] = array(
    'title' => 'Find orphaned products',
    'description' => 'Find products that have not been categorized.',
    'page callback' => 'uc_catalog_orphaned_products',
    'access arguments' => array('administer catalog'),
    'weight' => -4,
    'file' => 'uc_catalog.admin.inc',
  );

  return $items;
}

/**
 * Implement hook_permission().
 */
function uc_catalog_permission() {
  return array(
    'administer catalog' => array(
      'title' => t('Administer catalog'),
    ),
    'view catalog' => array(
      'title' => t('View catalog'),
    ),
  );
}

/**
 * Implement hook_init().
 */
function uc_catalog_init() {
  global $conf;
  $conf['i18n_variables'][] = 'uc_catalog_description';
  $conf['i18n_variables'][] = 'uc_catalog_name';
}

/**
 * Implement hook_enable().
 */
function uc_catalog_enable() {
  foreach (uc_product_types() as $type) {
    uc_catalog_add_node_type($type);
  }

  uc_catalog_add_image_field();
}

/**
 * Implement hook_image_default_styles().
 */
function uc_catalog_image_default_styles() {
  $styles = array();

  $styles['uc_category'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '100',
          'height' => '100',
          'upscale' => 0,
        ),
        'weight' => '0',
      ),
    ),
  );

  return $styles;
}

/**
 * Implement hook_theme().
 */
function uc_catalog_theme() {
  return array(
    'uc_catalog_block' => array(
      'variables' => array('menu_tree' => NULL),
    ),
    'uc_catalog_item' => array(
      'variables' => array(
        'here' => NULL,
        'link' => NULL,
        'lis' => NULL,
        'expand' => NULL,
        'inpath' => NULL,
        'count_children' => NULL,
      ),
    ),
  );
}

/**
 * Implement hook_node_view().
 */
function uc_catalog_node_view($node, $view_mode) {
  static $parents = array();

  if (uc_product_is_product($node->type) && isset($node->taxonomy_catalog[$node->language])) {
    if ($view_mode == 'full' && variable_get('uc_catalog_breadcrumb', TRUE)) {
      $crumbs = array();
      if (variable_get('site_frontpage', 'node') != 'catalog') {
        $crumbs[] = l(t('Home'), '');
      }

      $terms = $node->taxonomy_catalog[$node->language];
      if (count($terms)) {
        $crumbs[] = l(variable_get('uc_catalog_name', t('Catalog')), variable_get('uc_catalog_url', 'catalog'));
        $used_tids = array();

        foreach ($terms as $term) {
          if (!isset($parents[$term['tid']])) {
            $parents[$term['tid']] = taxonomy_get_parents_all($term['tid']);
          }

          foreach (array_reverse($parents[$term['tid']]) as $parent) {
            if (!in_array($parent->tid, $used_tids)) {
              $crumbs[] = l($parent->name, uc_catalog_path($parent));
              $used_tids[] = $parent->tid;
            }
          }
        }
      }

      drupal_set_breadcrumb($crumbs);
    }
  }
}

/**
 * Implement hook_taxonomy_vocabulary_delete().
 */
function uc_catalog_taxonomy_vocabulary_delete($vocabulary) {
  if ($vocabulary->vid == variable_get('uc_catalog_vid', 0)) {
    variable_del('uc_catalog_vid');
    variable_del('uc_catalog_name');
    variable_del('uc_catalog_description');
  }
}

/**
 * Implement hook_taxonomy_vocabulary_update().
 */
function uc_catalog_taxonomy_vocabulary_update($vocabulary) {
  if ($vocabulary->vid == variable_get('uc_catalog_vid', 0)) {
    variable_set('uc_catalog_name', check_plain($vocabulary->name));
    variable_set('uc_catalog_description', filter_xss_admin($vocabulary->description));
  }
}

/**
 * Implement hook_taxonomy_term_insert().
 */
function uc_catalog_taxonomy_term_insert($term) {
  if (module_exists('pathauto')) {
    if ($term->name) {
      module_load_include('inc', 'uc_catalog', 'uc_catalog.pathauto');
      $count = _uc_catalog_pathauto_alias($term, 'insert');
    }
  }
}

/**
 * Implement hook_taxonomy_term_update().
 */
function uc_catalog_taxonomy_term_update($term) {
  if (module_exists('pathauto')) {
    if ($term->name) {
      module_load_include('inc', 'uc_catalog', 'uc_catalog.pathauto');
      $count = _uc_catalog_pathauto_alias($term, 'update');
    }
  }
}

/**
 * Implement hook_taxonomy_term_delete().
 */
function uc_catalog_taxonomy_term_delete($term) {
  path_delete(array('source' => uc_catalog_path($term)));
}

/**
 * Implement hook_link_alter().
 *
 * Rewrite taxonomy term links to point to the catalog.
 */
function uc_catalog_link_alter(&$links, $node) {
  // Link back to the catalog and not the taxonomy term page
  foreach ($links AS $module => $link) {
    if (strstr($module, 'taxonomy_term')) {
      $tid = explode('_', $module);
      $tid = $tid[2];
      $term = taxonomy_term_load($tid);
      if ($term->vid == variable_get('uc_catalog_vid', 0)) {
        $links[$module]['href'] = uc_catalog_path($term);
      }
    }
  }
}

/**
 * Implement hook_block_info().
 *
 * Displays a menu for navigating the "Product Catalog"
 */
function uc_catalog_block_info() {
  $blocks['catalog'] = array(
    'info' => variable_get('uc_catalog_name', t('Catalog')),
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function uc_catalog_block_view($delta = '') {
  if ($delta == 'catalog') {
    $block = array();

    if (user_access('view catalog')) {
      drupal_add_css(drupal_get_path('module', 'uc_catalog') . '/uc_catalog.css');

      // Get the vocabulary tree information.
      $vid = variable_get('uc_catalog_vid', 0);
      $tree = taxonomy_get_tree($vid);

      // Then convert it into an actual tree structure.
      $seq = 0;
      $menu_tree = new UcTreeNode();
      $level = array();
      $curr_depth = -1;

      foreach ($tree as $knot) {
        $seq++;
        $knot->sequence = $seq;
        $knothole = new UcTreeNode($knot);
        // Begin at the root of the tree and find the proper place.
        $menu_tree->add_child($knothole);
      }

      // Now, create a structured menu, separate from Drupal's menu.
      $content = theme('uc_catalog_block', array('menu_tree' => $menu_tree));

      $subject = variable_get('uc_catalog_name', t('Catalog'));
      if (variable_get('uc_catalog_block_title', FALSE)) {
        $subject = l($subject, 'catalog');
      }

      $block = array('subject' => $subject, 'content' => $content);
    }

    return $block;
  }
}

/**
 * Theme the catalog block.
 *
 * @ingroup themeable
 * @see theme_uc_catalog_item()
 */
function theme_uc_catalog_block($variables) {
  $menu_tree = $variables['menu_tree'];

  $output = '<ul class="catalog menu">';

  foreach ($menu_tree->children as $branch) {
    list($inpath, $html) = _uc_catalog_navigation($branch);
    $output .= $html;
  }

  $output .= '</ul>';

  return $output;
}

/******************************************************************************
 * Module Hooks                                                             *
 ******************************************************************************/

function uc_catalog_views_api() {
  return array(
    'api' => '2.0',
  );
}

/******************************************************************************
 * Ubercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implement hook_uc_store_status().
 *
 * Provide status information about the "Product Catalog" and products not
 * listed in the catalog.
 */
function uc_catalog_uc_store_status() {
  $statuses = array();
  $cat_id = variable_get('uc_catalog_vid', 0);
  $catalog = taxonomy_vocabulary_load($cat_id);
  if ($catalog) {
    // Don't display a status if the taxonomy_index table has no data.
    if (variable_get('taxonomy_maintain_index_table', TRUE)) {
      $statuses[] = array('status' => 'ok', 'title' => t('Catalog vocabulary'),
        'desc' => t('Vocabulary !name has been identified as the Ubercart catalog.', array('!name' => l($catalog->name, 'admin/structure/taxonomy/' . $catalog->machine_name)))
      );

      $product_types = uc_product_types();
      $field = field_info_field('taxonomy_catalog');
      $types = array_intersect($product_types, $field['bundles']['node']);
      $excluded = 0;
      $result = db_query("SELECT COUNT(DISTINCT n.nid) FROM {node} AS n LEFT JOIN {taxonomy_index} AS ti ON n.nid = ti.nid LEFT JOIN {taxonomy_term_data} AS td ON ti.tid = td.tid WHERE n.type IN (:types) AND ti.tid IS NULL AND td.vid = :vid", array(':types' => $types, ':vid' => $catalog->vid));
      if ($excluded = $result->fetchField()) {
        $description = format_plural($excluded, 'There is 1 product not listed in the catalog.', 'There are @count products not listed in the catalog.')
          . t(' Products are listed by assigning a category from the <a href="!cat_url">Product Catalog</a> vocabulary to them.', array('!cat_url' => url('admin/structure/taxonomy/' . $catalog->machine_name)));
        $terms = db_query("SELECT COUNT(1) FROM {taxonomy_term_data} WHERE vid = :vid", array(':vid' => $catalog->vid))->fetchField();
        if ($terms) {
          $description .= ' ' . l(t('Find orphaned products here.'), 'admin/store/products/orphans');
        }
        else {
          $description .= ' ' . l(t('Add terms for the products to inhabit.'), 'admin/structure/taxonomy/' . $catalog->machine_name . '/add/term');
        }
        $statuses[] = array(
          'status' => 'warning',
          'title' => t('Unlisted products'),
          'desc' => $description,
        );
      }
    }
  }
  else {
    $statuses[] = array(
      'status' => 'error',
      'title' => t('Catalog vocabulary'),
      'desc' => t('No vocabulary has been recognized as the Ubercart catalog. Choose one on <a href="!admin_catalog">this page</a> or add one on the <a href="!admin_vocab">taxonomy admin page</a> first, if needed.', array('!admin_catalog' => url('admin/store/settings/catalog/edit'), '!admin_vocab' => url('admin/structure/taxonomy'))),
    );
  }

  return $statuses;
}

/**
 * Implement hook_uc_product_class().
 *
 * Add product node types to the catalog vocabulary as they are created.
 */
function uc_catalog_uc_product_class($type, $op) {
  $vid = variable_get('uc_catalog_vid', 0);
  switch ($op) {
    case 'insert':
      if ($vid) {
        $instance = array(
          'field_name' => 'taxonomy_catalog',
          'entity_type' => 'node',
          'bundle' => $type,
          'settings' => array(
            'vid' => $vid,
          ),
        );

        field_create_instance($instance);
      }
    break;
  }
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * Show the catalog page of the given category.
 */
function uc_catalog_browse($tid = 0) {
  $build = array();
  if ($terms = views_get_view('uc_catalog_terms')) {
    $build['terms'] = array(
      '#markup' => $terms->preview('default', array($tid)),
    );
  }
  if ($products = views_get_view('uc_catalog')) {
    // Force the breadcrumb path to this page.
    $products->override_path = 'catalog';
    $build['products'] = array(
      '#markup' => $products->execute_display('catalog', array($tid)),
    );
  }

  return $build;
}

/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/

/**
 * Summarize the catalog's block settings.
 *
 * @param $form
 *   The form passed from the summarizer
 * @return
 *   An array of summary information
 *
 * This function lets the summarizer do most of the work, only taking
 * advantage of the callback to insert a parent node, specifying that
 * the following settings are block settings, for visual clarity.
 */
function _uc_catalog_block_summarize($form) {
  $item = uc_summarize_form($form);

  $items[] = array(
    'data' => t('Block settings:'),
    'children' => $item,
  );

  return $items;
}

/**
 * Emulate Drupal's menu system, but based soley on the structure of "Product Catalog".
 *
 * @param $branch
 *   A treeNode object. Determines if the URL points to itself,
 *   or possibly one of it's children, if present.
 *
 *   If the URL points to itself or one of its products, it displays its name, and
 *   expands to show its children, otherwise displays a link and a count of the products in it.
 *   If the URL points to one of it's children, it still displays a link and product count,
 *   but must still be expanded.
 *   Otherwise, it is collapsed and a link.
 * @return
 *   An array whose first element is true if the treeNode is in hierarchy of the URL path.
 *   The second element is the HTML of the list item of itself and it's children.
 */
function _uc_catalog_navigation($branch) {
  static $terms;
  static $breadcrumb;
  static $types;

  if (empty($types)) {
    $types = uc_product_types();
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $types)
    ->fieldCondition('taxonomy_catalog', 'tid', $branch->tid)
    ->count();
  $num = $query->execute();

  // No nodes in category or descendants. Not in path and display nothing.
  if (!$num) {
    return array(FALSE, '');
  }

  $branch_path = uc_catalog_path($branch);
  if (!isset($breadcrumb)) {
    $breadcrumb = drupal_get_breadcrumb();
  }
  $vid = variable_get('uc_catalog_vid', 0);
  if ($_GET['q'] ==  $branch_path) {
    // The URL points to this term.
    $here = TRUE;
  }
  else {
    $here = FALSE;
  }
  if (!isset($terms)) {
    $node = menu_get_object('node', 1);
    if ($node) {
      $terms = $node->taxonomy_catalog[$node->language];
    }
    else {
      $terms = array();
    }
  }
  // Determine whether to expand menu item.
  if ((arg(0) == 'node' && array_key_exists($branch->tid, $terms))) {
    $inpath = FALSE;
    foreach ($breadcrumb as $link) {
      if (strpos($link, drupal_get_path_alias($branch_path)) !== FALSE) {
        $inpath = TRUE;
      }
    }
  }
  else {
    $inpath = $here;
  }

  // Checks to see if node counts are desired in navigation
  $num_text = '';
  if (variable_get('uc_catalog_block_nodecount', TRUE)) {
    $num_text = ' (' . $num . ')';
  }

  $lis = array();
  $expand = variable_get('uc_catalog_expand_categories', FALSE);
  $link = l($branch->name . $num_text, $branch_path);
  if ($expand || count($branch->children)) {
    foreach ($branch->children as $twig) {
      // Expand if children are in the menu path. Capture their output.
      list($child_in_path, $lis[]) = _uc_catalog_navigation($twig);
      if ($child_in_path) {
        $inpath = $child_in_path;
      }
    }
  }
  $output = theme('uc_catalog_item', array(
    'here' => $here,
    'link' => $link,
    'lis' => $lis,
    'expand' => $expand,
    'inpath' => $inpath,
    'count' => count($branch->children),
  ));

  // Tell parent category your status, and pass on output.
  return array($inpath, $output);
}

/**
 * Display a formatted link in the catalog block.
 *
 * @ingroup themeable
 */
function theme_uc_catalog_item($variables) {
  $here = $variables['here'];
  $link = $variables['link'];
  $lis = $variables['lis'];
  $expand = $variables['expand'];
  $inpath = $variables['inpath'];
  $count_children = $variables['count_children'];

  $output = '';

  if ($expand || $count_children) {
    if ($here) {
      $output = '<li class="expanded"><span class="trail">' . $link . "</span>\n";
      if (count($lis)) {
        $output .= '<ul class="menu">';
        foreach ($lis as $li) {
          $output .= $li . "\n";
        }
        $output .= "</ul>\n";
      }
      $output .= "</li>";
    }
    elseif ($expand || $inpath) {
      $output = '<li class="expanded"><span class="trail">' . $link . "</span>\n";
      if (count($lis)) {
        $output .= '<ul class="menu">';
        foreach ($lis as $li) {
          $output .= $li;
        }
        $output .= "</ul>\n";
      }
      $output .= "</li>";
    }
    else {
      $output = '<li class="collapsed">' . $link . "</li>\n";
    }
  }
  else {
    $output = '<li class="leaf">' . ($inpath ? '<span class="trail">' : '') . $link . ($inpath ? '</span>' : '') . "</li>\n";
  }

  return $output;
}

/**
 * Create paths to the catalog from taxonomy term.
 */
function uc_catalog_path($term) {
  return 'catalog/' . $term->tid;
}

/**
  * Add a node type to the catalog taxonomy term.
  */
function uc_catalog_add_node_type($type) {
  if (!($vid = variable_get('uc_catalog_vid', 0))) {
    return;
  }

  $instance = field_info_instance('node', 'taxonomy_catalog', $type);

  if (!$instance) {
    $instance = array(
      'field_name' => 'taxonomy_catalog',
      'entity_type' => 'node',
      'bundle' => $type,
      'label' => variable_get('uc_catalog_name', t('Catalog')),
      'settings' => array(
        'allowed_values' => array(
          array(
            'vid' => $vid,
            'parent' => '0',
          ),
        ),
      ),
    );

    field_create_instance($instance);
  }
}

/**
 * Set up a default image field on the Catalog vocabulary.
 */
function uc_catalog_add_image_field() {
  $field = field_info_field('uc_catalog_image');

  if (!$field) {
    $field = array(
      'field_name' => 'uc_catalog_image',
      'type' => 'image',
    );

    field_create_field($field);
  }

  $instance = field_info_instance('taxonomy_term', 'uc_catalog_image', 'catalog');

  // Only add the instance if it doesn't exist. Don't overwrite any changes.
  if (!$instance) {
    $label = t('Image');
    $instance = array(
      'field_name' => 'uc_catalog_image',
      'entity_type' => 'taxonomy_term',
      'bundle' => 'catalog',
      'label' => $label,
      'widget' => array(
        'type' => 'image_image',
      ),
      'display' => array(
        'full' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array(
            'image_link' => 'content',
            'image_style' => 'uc_category',
          ),
        ),
      ),
    );

    field_create_instance($instance);
  }
}
