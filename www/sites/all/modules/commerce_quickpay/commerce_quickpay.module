<?php
/**
 * @file
 * Implements Quickpay payment services for use in Drupal Commerce.
 */

function commerce_quickpay_get_secret() {
   return '8sGi39t5799R3D1794fkeS35yJV5CZlzP7p8B4HEh24jTA5Ldc673w8gI4mq1av1';
}
function commerce_quickpay_get_merchant() {
  return '33531192';
}

function commerce_quickpay_menu() {
  $items['shop/quickpay/callback'] = array('page callback' => 'commerce_quickpay_callback', 'access callback' => true);
  $items['shop/quickpay/test'] = array('page callback' => 'commerce_quickpay_test', 'access callback' => true);
  return $items;
}

function commerce_quickpay_test() {
	$order = commerce_order_load_by_number('55');
	$transaction = '33794608';
	$amount = 129500;
	$capture_amount = 0;
	foreach($order->commerce_line_items as $line_items) {
		foreach($line_items as $line_item) {
			$items = commerce_line_item_load($line_item['line_item_id']);
			foreach($items->commerce_product as $item) {
				foreach($item as $product_entity) {
					$product = commerce_product_load($product_entity['product_id']);
					if ($product->field_reserve_amount[LANGUAGE_NONE][0]['value'] != '1') {
						$capture_amount += $product->commerce_price[LANGUAGE_NONE][0]['amount'];
					}
				}
			}
		}
	}
	commerce_quickpay_capture($transaction, $capture_amount, $amount == $capture_amount);
}

function commerce_quickpay_callback() {
  $form = $_POST;
  try {
  $payment_status = commerce_quickpay_feedback_status($form['qpstat']);

  if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_SUCCESS) {
	$order = commerce_order_load_by_number(substr($form['ordernumber'], 5));
        commerce_order_status_update($order, 'processing');
	$amount = $form['amount'];
	$transaction = $form['transaction'];
	$capture_amount = 0;
        foreach($order->commerce_line_items as $line_items) {
                foreach($line_items as $line_item) {
                        $items = commerce_line_item_load($line_item['line_item_id']);
                        foreach($items->commerce_product as $item) {
                                foreach($item as $product_entity) {
                                        $product = commerce_product_load($product_entity['product_id']);
                                        if ($product->field_reserve_amount[LANGUAGE_NONE][0]['value'] != '1') {
                                                $capture_amount += $product->commerce_price[LANGUAGE_NONE][0]['amount'];
                                        }
                                }
                        }
                }
        }

	if ($capture_amount > 0) {
	        commerce_quickpay_capture($transaction, $capture_amount, $amount == $capture_amount);
	}
	 commerce_order_status_update($order, 'completed');
  }
  } catch (Exception $ex) {
    mail('peter.joelving@gmail.com', 'Quickpay Exception Message', "Vi faar en grim fejl: ".$ex->getMessage());
  }
}


function commerce_quickpay_capture($transaction, $amount, $finalize = false) {
  $data = array(
    'protocol' => 3,
    'msgtype' => 'capture',
    'merchant' => commerce_quickpay_get_merchant(),
    'amount' => $amount,
    'finalize' => $finalize ? '1' : '0',
    'transaction' => $transaction
  );
  $md5 = md5
  (
        $data['protocol'].
        $data['msgtype'].
        $data['merchant'].
        $data['amount'].
        $data['finalize'].
        $data['transaction'].
        commerce_quickpay_get_secret()
        );
  $data['md5check'] = $md5;

  $options = array('headers' => array('Content-Type' => 'application/x-www-form-urlencoded'), 'method' => 'POST', 'data' => http_build_query($data));
  $result = drupal_http_request('https://secure.quickpay.dk/api/', $options);
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_quickpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['quickpay'] = array(
    'base' => 'commerce_quickpay',
    'title' => t('Quickpay'),
    'short_title' => t('Quickpay'),
    'display_title' => t('Quickpay'),
    'description' => t('Integrates Quickpay payment system'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment methods settings form included
 * as part of the payment methodÕs enabling action in Rules
 */
function commerce_quickpay_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'account' => '',
    'merchant' => '',
    'merchant_md5' => '',
    'order_prefix' => '',
    'auto_capture' => '',
    'currency' => '',
  );


  // BASIC settings
  $form['account'] = array(
    '#type' 		=> 'checkbox',
    '#title' 		=> t('Quickpay Test'),
    '#description' 	=> 'Set the payments in test-mode',
    '#default_value' 	=> $settings['account'],
  );

  $form['merchant'] = array(
    '#type' 		=> 'textfield',
    '#title'		=> t('Quickpay Merchant ID'),
    '#description' 	=> t('Your Quickpay Merchant ID'), 
    '#default_value' 	=> $settings['merchant'],
  );

  $form['merchant_md5'] = array(
    '#type'		=> 'textfield',
    '#title' 		=> t('Quickpay Merchant MD5'),
    '#description' 	=> t('Your Quickpay Merchant MD5'), 
    '#default_value' 	=> $settings['merchant_md5'],
  );

  $form['order_prefix'] = array(
    '#type' 		=> 'textfield',
    '#title' 		=> t('Quickpay Order Prefix'),
    '#description' 	=> t('Your Quickpay Order Prefix'), 
    '#default_value' 	=> $settings['order_prefix'],
  );

  $form['auto_capture'] = array(
    '#type' 		=> 'radios',
    '#title'		=> t('Quickpay Auto Capture'),
    '#description' 	=> t('Select if Quickpay should auto capture non-shipable'), 
    '#options' 		=> array('false' => ('Do not auto capture non shipables'), 'true' => ('Auto capture non-shipables')),
    '#default_value' 	=> $settings['auto_capture'],
    '#required'		=> TRUE
  );

  $form['currency'] = array(
    '#type' 		=> 'radios',
    '#title'		=> t('Quickpay Currency'),
    '#description' 	=> t('Select which currency Quickpay should charge'), 
    '#options' 		=> quickpay_get_currencies(),	
    '#default_value' 	=> $settings['currency'],
  );

  // @TODO: LAYOUT settings
  $form['#submit'][] = 'commerce_quickpay_settings_form_submit';

  return $form;
}


/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service; because of the array merge that happens upon return,
 * the serviceÕs URL that should receive the POST variables should be set in
 * the #action property of the returned form array
 */
function commerce_quickpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['merchant'])) {
    drupal_set_message(t('Quickpay is not configured for use. No Quickpay Merchant has been specified.'), 'error');
    return array();
  }

  // Set feedback URLs
  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return the data from Quickpay Form
    'callback' => 'http://doek.dk/shop/quickpay/callback',
    //'callback' => 'http://doek.dk/sites/all/modules/commerce_quickpay/quickpay_return.php',

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_quickpay_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}


/**
 * Builds an Quickpay payment form from an order object.
 */
function commerce_quickpay_build_redirect_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $secret = $settings['merchant_md5'];

  // Get financial info
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  // Build the data array that will be translated into hidden form values.
  // NOTE: keys should be uppercase for the SHA-1 security string
  $data = array(
    // General parameters
    'protocol'		=> '4',
    'msgtype' 		=> 'authorize',
    'merchant'		=> $settings['merchant'],
    'language'		=> 'en',
    'ordernumber'	=> $settings['order_prefix'].$order->order_number,
    'amount'		=> $amount,
    'currency' 		=> $settings['currency'],
    'continueurl'	=> $settings['return'],
    'cancelurl'		=> $settings['cancel_return'],
    'callbackurl'	=> $settings['callback'],
    'autocapture'	=> '0',
    'cardtypelock'	=> 'dankort',
    'group'		=> '11111',
    'splitpayment'	=> '1',
  );

  // Redirect to quickpay

  $url = 'https://secure.quickpay.dk/form/';
  $form['#action'] = $url;


$md5 = md5
(
	$data['protocol']. 
	$data['msgtype']. 
	$data['merchant']. 
	$data['language'].
	$data['ordernumber']. 
	$data['amount']. 
	$data['currency'].
	$data['continueurl'].
	$data['cancelurl'].
	$data['callbackurl'].
	$data['autocapture'].
	$data['cardtypelock'].
	$data['group'].
	$data['splitpayment'].
	$secret
	);
  
  $data['md5check'] = $md5;

  foreach ($data as $name => $value) {
      $value = trim($value);
      
      // Add the value as a hidden form element
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay'),
  );

  return $form;
}


function quickpay_get_currencies(){
  $options = array();
  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = t('@code - !name', array('@code' => $currency['code'], '@symbol' => $currency['symbol'], '!name' => $currency['name']));

    if (!empty($currency['symbol'])) {
      $options[$currency_code] .= ' - ' . check_plain($currency['symbol']);
    }
  }
  return $options;

}

/**
 * Implements hook_redirect_form_validate.
 */
function commerce_quickpay_redirect_form_validate($order, $payment_method) {

	$server = mysql_connect('localhost', 'doek', 'yixWccPY');
	$DB = mysql_select_db('doek_quickpay', $server);

	$sql = "SELECT * FROM quickpay_info WHERE ordernumber = '".$payment_method['settings']['order_prefix'].$order->order_id."'";
	$result = mysql_query($sql);

	while($row = mysql_fetch_assoc($result)){
		$feedback = $row;
		$row['id'] = '';
		$string = implode('', $row);
		$string = str_replace($row['md5check'],'',$string).$payment_method['settings']['merchant_md5'];
		$row_secret = $row['md5check'];
	}
	if($string == $row_secret){
		commerce_quickpay_process_transaction($order, $payment_method, $feedback);
		return true;
	}
	else{
		commerce_quickpay_process_transaction($order, $payment_method, $feedback);
		return true;
	}
}

/**
 * Process the payment transaction with the info received from Quickpay
 *
 * @param $order
 *   The loaded order that is being processed
 * @param $payment_method
 *   The payment method settings
 * @param $feedback
 *   The parameters received from Quickpay regarding the payment
 */
function commerce_quickpay_process_transaction($order, $payment_method, $feedback) {
  $transaction = commerce_payment_transaction_new('commerce_quickpay', $order->order_id);
  $payment_status = commerce_quickpay_feedback_status($feedback['qpstat']);

  // identifying data
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $feedback['transaction'];
  // payment amount details
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  // payment status
  $transaction->remote_status = $feedback['qpstat'];
  $transaction->status = $payment_status['code'];
  $transaction->message = $payment_status['message'];
  
  commerce_payment_transaction_save($transaction);
  //if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_SUCCESS) {
  //  commerce_order_status_update($order, $payment_status['message']);
  //}
}

/**
 * Get a payment status and message based on Quickpay status ID
 * @param $status
 *   received Quickpay status ID
 * @return array
 *   key 'code' contains the commerce status
 *   key 'message' contains a textual representation of the Quickpay status ID
 */
function commerce_quickpay_feedback_status($status) {
 switch ($status) {
  case '000': // Accepted
    return array('code' => COMMERCE_PAYMENT_STATUS_SUCCESS, 'message' => t('Transaction Accepted'));
    break;
  case '001': // Rejected
  case '003': // Expired
  case '008': // Bad parameters sent to quickpay (could be user error)
    // Handled as failed.
    return array('code' => COMMERCE_PAYMENT_STATUS_FAILURE, 'message' => t('Transaction Error'));
    break;
  case '002': // Communication error
  case '004': // Wrong status (not authorized)
  case '005': // Authorization expired
  case '006': // Error at PBS
  case '007': // Error at QuickPay
    // All these are handled as internal error.
    return array('code' => COMMERCE_PAYMENT_STATUS_FAILURE, 'message' => t('Transaction Error'));
  default:
    return 'unknown';
  }
}

