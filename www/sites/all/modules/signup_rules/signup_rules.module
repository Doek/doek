<?php

/**
 * @file
 * Signup Rules provides Rules integration for Signup module (http://drupal.org/project/signup).
 */

/**
 * Implements hook_help().
 */
function signup_rules_help($path) {
  switch ($path) {
    case 'admin/help#signup_rules':
      $output = '<p>'. t('Signup Rules module provides Rules integration for the Signup module. To implement Rules events, navigate to administer >> rules >> ') .'</p>';
      return $output;
  }
}

/**
 * Implements hook_signup_insert().
 */
function signup_rules_signup_insert($signup) {
  rules_invoke_event('signup_rules_event_insert', user_load($signup->uid), node_load($signup->nid), $signup);
}

/**
 * Implements hook_signup_update().
 */
function signup_rules_signup_update($signup) {
  rules_invoke_event('signup_rules_event_update', user_load($signup->uid), node_load($signup->nid), $signup);
}

/**
 * Implements hook_signup_cancel().
 */
function signup_rules_signup_cancel($signup, $node) {
  rules_invoke_event('signup_rules_event_cancel', user_load($signup->uid), $node, $signup);
}

/**
 * Implements hook_signup_open().
 */
function signup_rules_signup_open($node) {
  rules_invoke_event('signup_rules_event_open', $node);
}

/**
 * Implements hook_signup_close().
 */
function signup_rules_signup_close($node) {
  rules_invoke_event('signup_rules_event_close', $node);
}

/**
 * Implements hook_signup_data_alter().
 *
 * We don't actually alter the signup data here. But we take advantage
 * of the access to the signup form data to determine on which form
 * the user signup occurred. Additionally, we can compare the signup
 * form data with the data stored in the database to determine what
 * properties have changed.
 */
function signup_rules_signup_data_alter(&$signup, $signup_form) {
  // This signup has not been saved yet.
  // Load the stored version of the signup for comparison.
  $stored_signup = signup_load_signup($signup->sid);

  // Check for a signup ID to ensure this is a new signup.
  if (empty($signup->sid)) {
    // Save the signup data before passing it to the rules event so that the
    // new data will exist in the database when it needs to be accessed in actions.
    signup_save_signup($signup);

    // User signed up from node signup form.
    if (!empty($signup_form['signup_form_data']) || !empty($signup_form['signup_anon_mail'])) {
      rules_invoke_event('signup_rules_event_signup_node', user_load($signup->uid), node_load($signup->nid), $signup);
    }
    // User signed up from user registration form.
    else {
      rules_invoke_event('signup_rules_event_signup_register', user_load($signup->uid), node_load($signup->nid), $signup);
    }
  }

  // Check if the attended status has changed.
  // There is no need to check for a signup ID here as any signup marked
  // attended/not attended will already have a signup ID.
  if (isset($signup->attended) && isset($signup_form['attended']) && $signup->attended !== $stored_signup->attended) {
    if ($signup->attended == 1) {
      signup_rules_invoke_attended('attended', $signup);
    }
    elseif ($signup->attended == 0) {
      signup_rules_invoke_attended('not_attended', $signup);
    }
  }
}

/**
 * Implements hook_watchdog().
 *
 * Since signup does not provide a way to determine when the attended
 * value is changed in actions, we parse the watchdog log entry to determine 
 * whether a signup has been marked attended or not attended. If either
 * matches, we load the signup from the integer given in the watchdog log
 * entry and pass the node and user with signup data.
 */
function signup_rules_watchdog(array $log_entry) {
  $parts = explode(' ', $log_entry['message']);
  $attended = 'attended.';
  $not_attended = 'did not attend.';
  if ($log_entry['type'] == 'action' && strpos($log_entry['message'], 'Marked signup ') == 0 && strstr($not_attended, $log_entry['message'])) {
    signup_rules_invoke_attended('not_attended', $parts[2]);
  }
  elseif ($log_entry['type'] == 'action' && strpos($log_entry['message'], 'Marked signup ') == 0 && strstr($attended, $log_entry['message'])) {
    signup_rules_invoke_attended('attended', $parts[2]);
  }
}

/**
 * Invokes attended/not attended events.
 */
function signup_rules_invoke_attended($action, $signup) {
  $signup = !is_object($signup) ? signup_load_signup($signup) : $signup;
  $action = 'signup_rules_event_'. $action;
  rules_invoke_event($action, user_load($signup->uid), node_load($signup->nid), $signup);
}

/**
 * Implements hook_signup_suppress().
 *
 * The suppression argument is passed by reference by setting the
 * value in an object, which is always passed by reference.
 */
function signup_rules_signup_suppress($node) {
  global $user;
  $suppress = new stdClass;
  $suppress->value = FALSE;
  rules_invoke_event('signup_rules_event_display', $user, $node, $suppress);
  return $suppress->value;
}

/**
 * Returns an array of signups for a specific user.
 *
 * @param $uid
 *   The user ID of the user whose signups we are retrieving.
 *
 * @return
 *   An array of signup objects relevant to the user.
 */
function signup_rules_get_user_signups($uid) {
  $signups = array();
  $query = db_query("SELECT u.uid, u.name, u.mail, u.language, s.* FROM {signup_log} s INNER JOIN {users} u ON u.uid = s.uid WHERE s.uid = :uid", array(':uid' => $uid));
  foreach ($query as $signup) {
    $signups[] = $signup;
  }
  return $signups;
}
